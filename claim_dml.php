<?php

// Data functions (insert, update, delete, form) for table claim

// This script and data application were generated by AppGini 22.13
// Download AppGini for free from https://bigprof.com/appgini/download/

function claim_insert(&$error_message = '') {
	global $Translation;

	// mm: can member insert record?
	$arrPerm = getTablePermissions('claim');
	if(!$arrPerm['insert']) return false;

	$data = [
		'claim_code' => Request::val('claim_code', ''),
		'claim_status' => Request::lookup('claim_status', ''),
		'claim_category' => Request::lookup('claim_category', ''),
		'cost_centre' => Request::lookup('cost_centre', ''),
		'client_identification' => Request::val('client_identification', ''),
		'department_name' => Request::lookup('department_name', ''),
		'district' => Request::lookup('district', ''),
		'province' => Request::lookup('province', ''),
		'merchant_name' => Request::lookup('merchant_name', ''),
		'vehicle_registration_number' => Request::lookup('vehicle_registration_number', ''),
		'model' => Request::lookup('vehicle_registration_number'),
		'closing_km' => Request::lookup('closing_km', ''),
		'pre_authorization_date' => Request::dateComponents('pre_authorization_date', '0000-00-00'),
		'instruction_note' => Request::val('instruction_note', ''),
		'invoice_date' => Request::dateComponents('invoice_date', '0000-00-00'),
		'upload_invoice' => Request::fileUpload('upload_invoice', [
			'maxSize' => 5242880,
			'types' => 'txt|doc|docx|docm|odt|pdf|rtf',
			'noRename' => true,
			'dir' => '',
			'success' => function($name, $selected_id) {
			},
			'failure' => function($selected_id, $fileRemoved) {
				if(!strlen(Request::val('SelectedID'))) return '';

				/* for empty upload fields, when saving a copy of an existing record, copy the original upload field */
				return existing_value('claim', 'upload_invoice', Request::val('SelectedID'));
			},
		]),
		'payment_date' => Request::dateComponents('payment_date', '0000-00-00'),
		'authorization_number' => Request::val('authorization_number', ''),
		'clearance_number' => Request::val('clearance_number', ''),
		'vehicle_collected_date' => Request::dateComponents('vehicle_collected_date', '0000-00-00'),
		'total_claimed' => Request::val('total_claimed', '0.00'),
		'total_authorized' => Request::val('total_authorized', '0.00'),
	];

	if($data['authorization_number'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Authorization Number:': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}

	// hook: claim_before_insert
	if(function_exists('claim_before_insert')) {
		$args = [];
		if(!claim_before_insert($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$error = '';
	// set empty fields to NULL
	$data = array_map(function($v) { return ($v === '' ? NULL : $v); }, $data);
	insert('claim', backtick_keys_once($data), $error);
	if($error) {
		$error_message = $error;
		return false;
	}

	$recID = db_insert_id(db_link());

	update_calc_fields('claim', $recID, calculated_fields()['claim']);

	// hook: claim_after_insert
	if(function_exists('claim_after_insert')) {
		$res = sql("SELECT * FROM `claim` WHERE `claim_id`='" . makeSafe($recID, false) . "' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) {
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args = [];
		if(!claim_after_insert($data, getMemberInfo(), $args)) { return $recID; }
	}

	// mm: save ownership data
	set_record_owner('claim', $recID, getLoggedMemberID());

	// if this record is a copy of another record, copy children if applicable
	if(strlen(Request::val('SelectedID'))) claim_copy_children($recID, Request::val('SelectedID'));

	return $recID;
}

function claim_copy_children($destination_id, $source_id) {
	global $Translation;
	$requests = []; // array of curl handlers for launching insert requests
	$eo = ['silentErrors' => true];
	$safe_sid = makeSafe($source_id);

	// launch requests, asynchronously
	curl_batch($requests);
}

function claim_delete($selected_id, $AllowDeleteOfParents = false, $skipChecks = false) {
	// insure referential integrity ...
	global $Translation;
	$selected_id = makeSafe($selected_id);

	// mm: can member delete record?
	if(!check_record_permission('claim', $selected_id, 'delete')) {
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: claim_before_delete
	if(function_exists('claim_before_delete')) {
		$args = [];
		if(!claim_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'] . (
				!empty($args['error_message']) ?
					'<div class="text-bold">' . strip_tags($args['error_message']) . '</div>'
					: '' 
			);
	}

	// child table: vehicle_history
	$res = sql("SELECT `claim_id` FROM `claim` WHERE `claim_id`='{$selected_id}'", $eo);
	$claim_id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `vehicle_history` WHERE `claim_code`='" . makeSafe($claim_id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'vehicle_history', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'vehicle_history', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="btn btn-danger" value="' . html_attr($Translation['yes']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1&csrf_token=' . urlencode(csrf_token(false, true)) . '\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="btn btn-success" value="' . html_attr($Translation[ 'no']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: authorizations
	$res = sql("SELECT `claim_id` FROM `claim` WHERE `claim_id`='{$selected_id}'", $eo);
	$claim_id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `authorizations` WHERE `job_code`='" . makeSafe($claim_id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'authorizations', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'authorizations', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="btn btn-danger" value="' . html_attr($Translation['yes']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1&csrf_token=' . urlencode(csrf_token(false, true)) . '\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="btn btn-success" value="' . html_attr($Translation[ 'no']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: authorizations
	$res = sql("SELECT `claim_id` FROM `claim` WHERE `claim_id`='{$selected_id}'", $eo);
	$claim_id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `authorizations` WHERE `vehicle_registration_number`='" . makeSafe($claim_id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'authorizations', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'authorizations', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="btn btn-danger" value="' . html_attr($Translation['yes']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1&csrf_token=' . urlencode(csrf_token(false, true)) . '\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="btn btn-success" value="' . html_attr($Translation[ 'no']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: authorizations
	$res = sql("SELECT `claim_id` FROM `claim` WHERE `claim_id`='{$selected_id}'", $eo);
	$claim_id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `authorizations` WHERE `client`='" . makeSafe($claim_id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'authorizations', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'authorizations', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="btn btn-danger" value="' . html_attr($Translation['yes']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1&csrf_token=' . urlencode(csrf_token(false, true)) . '\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="btn btn-success" value="' . html_attr($Translation[ 'no']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: vehicle_handing_over_checklist
	$res = sql("SELECT `claim_id` FROM `claim` WHERE `claim_id`='{$selected_id}'", $eo);
	$claim_id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `vehicle_handing_over_checklist` WHERE `authorization_number`='" . makeSafe($claim_id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'vehicle_handing_over_checklist', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'vehicle_handing_over_checklist', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="btn btn-danger" value="' . html_attr($Translation['yes']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1&csrf_token=' . urlencode(csrf_token(false, true)) . '\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="btn btn-success" value="' . html_attr($Translation[ 'no']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: external_repairs_mechanical
	$res = sql("SELECT `claim_id` FROM `claim` WHERE `claim_id`='{$selected_id}'", $eo);
	$claim_id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `external_repairs_mechanical` WHERE `authorization_number`='" . makeSafe($claim_id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'external_repairs_mechanical', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'external_repairs_mechanical', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="btn btn-danger" value="' . html_attr($Translation['yes']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1&csrf_token=' . urlencode(csrf_token(false, true)) . '\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="btn btn-success" value="' . html_attr($Translation[ 'no']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: external_repairs_mechanical
	$res = sql("SELECT `claim_id` FROM `claim` WHERE `claim_id`='{$selected_id}'", $eo);
	$claim_id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `external_repairs_mechanical` WHERE `instruction_note`='" . makeSafe($claim_id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'external_repairs_mechanical', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'external_repairs_mechanical', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="btn btn-danger" value="' . html_attr($Translation['yes']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1&csrf_token=' . urlencode(csrf_token(false, true)) . '\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="btn btn-success" value="' . html_attr($Translation[ 'no']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: external_repairs_body
	$res = sql("SELECT `claim_id` FROM `claim` WHERE `claim_id`='{$selected_id}'", $eo);
	$claim_id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `external_repairs_body` WHERE `instruction_note`='" . makeSafe($claim_id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'external_repairs_body', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'external_repairs_body', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="btn btn-danger" value="' . html_attr($Translation['yes']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1&csrf_token=' . urlencode(csrf_token(false, true)) . '\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="btn btn-success" value="' . html_attr($Translation[ 'no']) . '" onClick="window.location = \'claim_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	sql("DELETE FROM `claim` WHERE `claim_id`='{$selected_id}'", $eo);

	// hook: claim_after_delete
	if(function_exists('claim_after_delete')) {
		$args = [];
		claim_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("DELETE FROM `membership_userrecords` WHERE `tableName`='claim' AND `pkValue`='{$selected_id}'", $eo);
}

function claim_update(&$selected_id, &$error_message = '') {
	global $Translation;

	// mm: can member edit record?
	if(!check_record_permission('claim', $selected_id, 'edit')) return false;

	$data = [
		'claim_code' => Request::val('claim_code', ''),
		'claim_status' => Request::lookup('claim_status', ''),
		'claim_category' => Request::lookup('claim_category', ''),
		'cost_centre' => Request::lookup('cost_centre', ''),
		'client_identification' => Request::val('client_identification', ''),
		'department_name' => Request::lookup('department_name', ''),
		'district' => Request::lookup('district', ''),
		'province' => Request::lookup('province', ''),
		'merchant_name' => Request::lookup('merchant_name', ''),
		'vehicle_registration_number' => Request::lookup('vehicle_registration_number', ''),
		'model' => Request::lookup('vehicle_registration_number'),
		'closing_km' => Request::lookup('closing_km', ''),
		'pre_authorization_date' => Request::dateComponents('pre_authorization_date', ''),
		'instruction_note' => Request::val('instruction_note', ''),
		'invoice_date' => Request::dateComponents('invoice_date', ''),
		'upload_invoice' => Request::fileUpload('upload_invoice', [
			'maxSize' => 5242880,
			'types' => 'txt|doc|docx|docm|odt|pdf|rtf',
			'noRename' => true,
			'dir' => '',
			'id' => $selected_id,
			'success' => function($name, $selected_id) {
			},
			'removeOnRequest' => true,
			'remove' => function($selected_id) {
				// do nothing: preserve removed files on server.
			},
			'failure' => function($selected_id, $fileRemoved) {
				if($fileRemoved) return '';
				return existing_value('claim', 'upload_invoice', $selected_id);
			},
		]),
		'payment_date' => Request::dateComponents('payment_date', ''),
		'authorization_number' => Request::val('authorization_number', ''),
		'clearance_number' => Request::val('clearance_number', ''),
		'vehicle_collected_date' => Request::dateComponents('vehicle_collected_date', ''),
		'total_claimed' => Request::val('total_claimed', ''),
		'total_authorized' => Request::val('total_authorized', ''),
	];

	if($data['authorization_number'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Authorization Number:': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	// get existing values
	$old_data = getRecord('claim', $selected_id);
	if(is_array($old_data)) {
		$old_data = array_map('makeSafe', $old_data);
		$old_data['selectedID'] = makeSafe($selected_id);
	}

	$data['selectedID'] = makeSafe($selected_id);

	// hook: claim_before_update
	if(function_exists('claim_before_update')) {
		$args = ['old_data' => $old_data];
		if(!claim_before_update($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$set = $data; unset($set['selectedID']);
	foreach ($set as $field => $value) {
		$set[$field] = ($value !== '' && $value !== NULL) ? $value : NULL;
	}

	if(!update(
		'claim', 
		backtick_keys_once($set), 
		['`claim_id`' => $selected_id], 
		$error_message
	)) {
		echo $error_message;
		echo '<a href="claim_view.php?SelectedID=' . urlencode($selected_id) . "\">{$Translation['< back']}</a>";
		exit;
	}


	$eo = ['silentErrors' => true];

	update_calc_fields('claim', $data['selectedID'], calculated_fields()['claim']);

	// hook: claim_after_update
	if(function_exists('claim_after_update')) {
		$res = sql("SELECT * FROM `claim` WHERE `claim_id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) $data = array_map('makeSafe', $row);

		$data['selectedID'] = $data['claim_id'];
		$args = ['old_data' => $old_data];
		if(!claim_after_update($data, getMemberInfo(), $args)) return;
	}

	// mm: update ownership data
	sql("UPDATE `membership_userrecords` SET `dateUpdated`='" . time() . "' WHERE `tableName`='claim' AND `pkValue`='" . makeSafe($selected_id) . "'", $eo);
}

function claim_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $separateDV = 0, $TemplateDV = '', $TemplateDVP = '') {
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;
	$eo = ['silentErrors' => true];
	$noUploads = null;
	$row = $urow = $jsReadOnly = $jsEditable = $lookups = null;

	$noSaveAsCopy = true;

	// mm: get table permissions
	$arrPerm = getTablePermissions('claim');
	if(!$arrPerm['insert'] && $selected_id == '')
		// no insert permission and no record selected
		// so show access denied error unless TVDV
		return $separateDV ? $Translation['tableAccessDenied'] : '';
	$AllowInsert = ($arrPerm['insert'] ? true : false);
	// print preview?
	$dvprint = false;
	if(strlen($selected_id) && Request::val('dvprint_x') != '') {
		$dvprint = true;
	}

	$filterer_claim_status = Request::val('filterer_claim_status');
	$filterer_claim_category = Request::val('filterer_claim_category');
	$filterer_cost_centre = Request::val('filterer_cost_centre');
	$filterer_department_name = Request::val('filterer_department_name');
	$filterer_district = Request::val('filterer_district');
	$filterer_province = Request::val('filterer_province');
	$filterer_merchant_name = Request::val('filterer_merchant_name');
	$filterer_vehicle_registration_number = Request::val('filterer_vehicle_registration_number');
	$filterer_closing_km = Request::val('filterer_closing_km');

	// populate filterers, starting from children to grand-parents
	if($filterer_closing_km && !$filterer_vehicle_registration_number) $filterer_vehicle_registration_number = sqlValue("select vehicle_registration_number from log_sheet where fuel_log_sheet_id='" . makeSafe($filterer_closing_km) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: claim_status
	$combo_claim_status = new DataCombo;
	// combobox: claim_category
	$combo_claim_category = new DataCombo;
	// combobox: cost_centre
	$combo_cost_centre = new DataCombo;
	// combobox: department_name
	$combo_department_name = new DataCombo;
	// combobox: district
	$combo_district = new DataCombo;
	// combobox: province
	$combo_province = new DataCombo;
	// combobox: merchant_name
	$combo_merchant_name = new DataCombo;
	// combobox: vehicle_registration_number
	$combo_vehicle_registration_number = new DataCombo;
	// combobox: closing_km, filterable by: vehicle_registration_number
	$combo_closing_km = new DataCombo;
	// combobox: pre_authorization_date
	$combo_pre_authorization_date = new DateCombo;
	$combo_pre_authorization_date->DateFormat = "dmy";
	$combo_pre_authorization_date->MinYear = defined('claim.pre_authorization_date.MinYear') ? constant('claim.pre_authorization_date.MinYear') : 1900;
	$combo_pre_authorization_date->MaxYear = defined('claim.pre_authorization_date.MaxYear') ? constant('claim.pre_authorization_date.MaxYear') : 2100;
	$combo_pre_authorization_date->DefaultDate = parseMySQLDate('0000-00-00', '0000-00-00');
	$combo_pre_authorization_date->MonthNames = $Translation['month names'];
	$combo_pre_authorization_date->NamePrefix = 'pre_authorization_date';
	// combobox: invoice_date
	$combo_invoice_date = new DateCombo;
	$combo_invoice_date->DateFormat = "dmy";
	$combo_invoice_date->MinYear = defined('claim.invoice_date.MinYear') ? constant('claim.invoice_date.MinYear') : 1900;
	$combo_invoice_date->MaxYear = defined('claim.invoice_date.MaxYear') ? constant('claim.invoice_date.MaxYear') : 2100;
	$combo_invoice_date->DefaultDate = parseMySQLDate('0000-00-00', '0000-00-00');
	$combo_invoice_date->MonthNames = $Translation['month names'];
	$combo_invoice_date->NamePrefix = 'invoice_date';
	// combobox: payment_date
	$combo_payment_date = new DateCombo;
	$combo_payment_date->DateFormat = "dmy";
	$combo_payment_date->MinYear = defined('claim.payment_date.MinYear') ? constant('claim.payment_date.MinYear') : 1900;
	$combo_payment_date->MaxYear = defined('claim.payment_date.MaxYear') ? constant('claim.payment_date.MaxYear') : 2100;
	$combo_payment_date->DefaultDate = parseMySQLDate('0000-00-00', '0000-00-00');
	$combo_payment_date->MonthNames = $Translation['month names'];
	$combo_payment_date->NamePrefix = 'payment_date';
	// combobox: vehicle_collected_date
	$combo_vehicle_collected_date = new DateCombo;
	$combo_vehicle_collected_date->DateFormat = "dmy";
	$combo_vehicle_collected_date->MinYear = defined('claim.vehicle_collected_date.MinYear') ? constant('claim.vehicle_collected_date.MinYear') : 1900;
	$combo_vehicle_collected_date->MaxYear = defined('claim.vehicle_collected_date.MaxYear') ? constant('claim.vehicle_collected_date.MaxYear') : 2100;
	$combo_vehicle_collected_date->DefaultDate = parseMySQLDate('0000-00-00', '0000-00-00');
	$combo_vehicle_collected_date->MonthNames = $Translation['month names'];
	$combo_vehicle_collected_date->NamePrefix = 'vehicle_collected_date';

	if($selected_id) {
		// mm: check member permissions
		if(!$arrPerm['view']) return $Translation['tableAccessDenied'];

		// mm: who is the owner?
		$ownerGroupID = sqlValue("SELECT `groupID` FROM `membership_userrecords` WHERE `tableName`='claim' AND `pkValue`='" . makeSafe($selected_id) . "'");
		$ownerMemberID = sqlValue("SELECT LCASE(`memberID`) FROM `membership_userrecords` WHERE `tableName`='claim' AND `pkValue`='" . makeSafe($selected_id) . "'");

		if($arrPerm['view'] == 1 && getLoggedMemberID() != $ownerMemberID) return $Translation['tableAccessDenied'];
		if($arrPerm['view'] == 2 && getLoggedGroupID() != $ownerGroupID) return $Translation['tableAccessDenied'];

		// can edit?
		$AllowUpdate = 0;
		if(($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3) {
			$AllowUpdate = 1;
		}

		$res = sql("SELECT * FROM `claim` WHERE `claim_id`='" . makeSafe($selected_id) . "'", $eo);
		if(!($row = db_fetch_array($res))) {
			return error_message($Translation['No records found'], 'claim_view.php', false);
		}
		$combo_claim_status->SelectedData = $row['claim_status'];
		$combo_claim_category->SelectedData = $row['claim_category'];
		$combo_cost_centre->SelectedData = $row['cost_centre'];
		$combo_department_name->SelectedData = $row['department_name'];
		$combo_district->SelectedData = $row['district'];
		$combo_province->SelectedData = $row['province'];
		$combo_merchant_name->SelectedData = $row['merchant_name'];
		$combo_vehicle_registration_number->SelectedData = $row['vehicle_registration_number'];
		$combo_closing_km->SelectedData = $row['closing_km'];
		$combo_pre_authorization_date->DefaultDate = $row['pre_authorization_date'];
		$combo_invoice_date->DefaultDate = $row['invoice_date'];
		$combo_payment_date->DefaultDate = $row['payment_date'];
		$combo_vehicle_collected_date->DefaultDate = $row['vehicle_collected_date'];
		$urow = $row; /* unsanitized data */
		$row = array_map('safe_html', $row);
	} else {
		$filterField = Request::val('FilterField');
		$filterOperator = Request::val('FilterOperator');
		$filterValue = Request::val('FilterValue');
		$combo_claim_status->SelectedData = $filterer_claim_status;
		$combo_claim_category->SelectedData = $filterer_claim_category;
		$combo_cost_centre->SelectedData = $filterer_cost_centre;
		$combo_department_name->SelectedData = $filterer_department_name;
		$combo_district->SelectedData = $filterer_district;
		$combo_province->SelectedData = $filterer_province;
		$combo_merchant_name->SelectedData = $filterer_merchant_name;
		$combo_vehicle_registration_number->SelectedData = $filterer_vehicle_registration_number;
		$combo_closing_km->SelectedData = $filterer_closing_km;
	}
	$combo_claim_status->HTML = '<span id="claim_status-container' . $rnd1 . '"></span><input type="hidden" name="claim_status" id="claim_status' . $rnd1 . '" value="' . html_attr($combo_claim_status->SelectedData) . '">';
	$combo_claim_status->MatchText = '<span id="claim_status-container-readonly' . $rnd1 . '"></span><input type="hidden" name="claim_status" id="claim_status' . $rnd1 . '" value="' . html_attr($combo_claim_status->SelectedData) . '">';
	$combo_claim_category->HTML = '<span id="claim_category-container' . $rnd1 . '"></span><input type="hidden" name="claim_category" id="claim_category' . $rnd1 . '" value="' . html_attr($combo_claim_category->SelectedData) . '">';
	$combo_claim_category->MatchText = '<span id="claim_category-container-readonly' . $rnd1 . '"></span><input type="hidden" name="claim_category" id="claim_category' . $rnd1 . '" value="' . html_attr($combo_claim_category->SelectedData) . '">';
	$combo_cost_centre->HTML = '<span id="cost_centre-container' . $rnd1 . '"></span><input type="hidden" name="cost_centre" id="cost_centre' . $rnd1 . '" value="' . html_attr($combo_cost_centre->SelectedData) . '">';
	$combo_cost_centre->MatchText = '<span id="cost_centre-container-readonly' . $rnd1 . '"></span><input type="hidden" name="cost_centre" id="cost_centre' . $rnd1 . '" value="' . html_attr($combo_cost_centre->SelectedData) . '">';
	$combo_department_name->HTML = '<span id="department_name-container' . $rnd1 . '"></span><input type="hidden" name="department_name" id="department_name' . $rnd1 . '" value="' . html_attr($combo_department_name->SelectedData) . '">';
	$combo_department_name->MatchText = '<span id="department_name-container-readonly' . $rnd1 . '"></span><input type="hidden" name="department_name" id="department_name' . $rnd1 . '" value="' . html_attr($combo_department_name->SelectedData) . '">';
	$combo_district->HTML = '<span id="district-container' . $rnd1 . '"></span><input type="hidden" name="district" id="district' . $rnd1 . '" value="' . html_attr($combo_district->SelectedData) . '">';
	$combo_district->MatchText = '<span id="district-container-readonly' . $rnd1 . '"></span><input type="hidden" name="district" id="district' . $rnd1 . '" value="' . html_attr($combo_district->SelectedData) . '">';
	$combo_province->HTML = '<span id="province-container' . $rnd1 . '"></span><input type="hidden" name="province" id="province' . $rnd1 . '" value="' . html_attr($combo_province->SelectedData) . '">';
	$combo_province->MatchText = '<span id="province-container-readonly' . $rnd1 . '"></span><input type="hidden" name="province" id="province' . $rnd1 . '" value="' . html_attr($combo_province->SelectedData) . '">';
	$combo_merchant_name->HTML = '<span id="merchant_name-container' . $rnd1 . '"></span><input type="hidden" name="merchant_name" id="merchant_name' . $rnd1 . '" value="' . html_attr($combo_merchant_name->SelectedData) . '">';
	$combo_merchant_name->MatchText = '<span id="merchant_name-container-readonly' . $rnd1 . '"></span><input type="hidden" name="merchant_name" id="merchant_name' . $rnd1 . '" value="' . html_attr($combo_merchant_name->SelectedData) . '">';
	$combo_vehicle_registration_number->HTML = '<span id="vehicle_registration_number-container' . $rnd1 . '"></span><input type="hidden" name="vehicle_registration_number" id="vehicle_registration_number' . $rnd1 . '" value="' . html_attr($combo_vehicle_registration_number->SelectedData) . '">';
	$combo_vehicle_registration_number->MatchText = '<span id="vehicle_registration_number-container-readonly' . $rnd1 . '"></span><input type="hidden" name="vehicle_registration_number" id="vehicle_registration_number' . $rnd1 . '" value="' . html_attr($combo_vehicle_registration_number->SelectedData) . '">';
	$combo_closing_km->HTML = '<span id="closing_km-container' . $rnd1 . '"></span><input type="hidden" name="closing_km" id="closing_km' . $rnd1 . '" value="' . html_attr($combo_closing_km->SelectedData) . '">';
	$combo_closing_km->MatchText = '<span id="closing_km-container-readonly' . $rnd1 . '"></span><input type="hidden" name="closing_km" id="closing_km' . $rnd1 . '" value="' . html_attr($combo_closing_km->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_claim_status__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['claim_status'] : htmlspecialchars($filterer_claim_status, ENT_QUOTES)); ?>"};
		AppGini.current_claim_category__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['claim_category'] : htmlspecialchars($filterer_claim_category, ENT_QUOTES)); ?>"};
		AppGini.current_cost_centre__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['cost_centre'] : htmlspecialchars($filterer_cost_centre, ENT_QUOTES)); ?>"};
		AppGini.current_department_name__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['department_name'] : htmlspecialchars($filterer_department_name, ENT_QUOTES)); ?>"};
		AppGini.current_district__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['district'] : htmlspecialchars($filterer_district, ENT_QUOTES)); ?>"};
		AppGini.current_province__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['province'] : htmlspecialchars($filterer_province, ENT_QUOTES)); ?>"};
		AppGini.current_merchant_name__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['merchant_name'] : htmlspecialchars($filterer_merchant_name, ENT_QUOTES)); ?>"};
		AppGini.current_vehicle_registration_number__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['vehicle_registration_number'] : htmlspecialchars($filterer_vehicle_registration_number, ENT_QUOTES)); ?>"};
		AppGini.current_closing_km__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['closing_km'] : htmlspecialchars($filterer_closing_km, ENT_QUOTES)); ?>"};

		jQuery(function() {
			setTimeout(function() {
				if(typeof(claim_status_reload__RAND__) == 'function') claim_status_reload__RAND__();
				if(typeof(claim_category_reload__RAND__) == 'function') claim_category_reload__RAND__();
				if(typeof(cost_centre_reload__RAND__) == 'function') cost_centre_reload__RAND__();
				if(typeof(department_name_reload__RAND__) == 'function') department_name_reload__RAND__();
				if(typeof(district_reload__RAND__) == 'function') district_reload__RAND__();
				if(typeof(province_reload__RAND__) == 'function') province_reload__RAND__();
				if(typeof(merchant_name_reload__RAND__) == 'function') merchant_name_reload__RAND__();
				if(typeof(vehicle_registration_number_reload__RAND__) == 'function') vehicle_registration_number_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(closing_km_reload__RAND__) == \'function\') closing_km_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);' : ''); ?>
			}, 50); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function claim_status_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#claim_status-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_claim_status__RAND__.value, t: 'claim', f: 'claim_status' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="claim_status"]').val(resp.results[0].id);
							$j('[id=claim_status-container-readonly__RAND__]').html('<span class="match-text" id="claim_status-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_status_view_parent]').hide(); } else { $j('.btn[id=claim_status_view_parent]').show(); }


							if(typeof(claim_status_update_autofills__RAND__) == 'function') claim_status_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'claim', f: 'claim_status' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_claim_status__RAND__.value = e.added.id;
				AppGini.current_claim_status__RAND__.text = e.added.text;
				$j('[name="claim_status"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_status_view_parent]').hide(); } else { $j('.btn[id=claim_status_view_parent]').show(); }


				if(typeof(claim_status_update_autofills__RAND__) == 'function') claim_status_update_autofills__RAND__();
			});

			if(!$j("#claim_status-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_claim_status__RAND__.value, t: 'claim', f: 'claim_status' },
					success: function(resp) {
						$j('[name="claim_status"]').val(resp.results[0].id);
						$j('[id=claim_status-container-readonly__RAND__]').html('<span class="match-text" id="claim_status-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_status_view_parent]').hide(); } else { $j('.btn[id=claim_status_view_parent]').show(); }

						if(typeof(claim_status_update_autofills__RAND__) == 'function') claim_status_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_claim_status__RAND__.value, t: 'claim', f: 'claim_status' },
				success: function(resp) {
					$j('[id=claim_status-container__RAND__], [id=claim_status-container-readonly__RAND__]').html('<span class="match-text" id="claim_status-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_status_view_parent]').hide(); } else { $j('.btn[id=claim_status_view_parent]').show(); }

					if(typeof(claim_status_update_autofills__RAND__) == 'function') claim_status_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function claim_category_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#claim_category-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_claim_category__RAND__.value, t: 'claim', f: 'claim_category' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="claim_category"]').val(resp.results[0].id);
							$j('[id=claim_category-container-readonly__RAND__]').html('<span class="match-text" id="claim_category-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_category_view_parent]').hide(); } else { $j('.btn[id=claim_category_view_parent]').show(); }


							if(typeof(claim_category_update_autofills__RAND__) == 'function') claim_category_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'claim', f: 'claim_category' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_claim_category__RAND__.value = e.added.id;
				AppGini.current_claim_category__RAND__.text = e.added.text;
				$j('[name="claim_category"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_category_view_parent]').hide(); } else { $j('.btn[id=claim_category_view_parent]').show(); }


				if(typeof(claim_category_update_autofills__RAND__) == 'function') claim_category_update_autofills__RAND__();
			});

			if(!$j("#claim_category-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_claim_category__RAND__.value, t: 'claim', f: 'claim_category' },
					success: function(resp) {
						$j('[name="claim_category"]').val(resp.results[0].id);
						$j('[id=claim_category-container-readonly__RAND__]').html('<span class="match-text" id="claim_category-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_category_view_parent]').hide(); } else { $j('.btn[id=claim_category_view_parent]').show(); }

						if(typeof(claim_category_update_autofills__RAND__) == 'function') claim_category_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_claim_category__RAND__.value, t: 'claim', f: 'claim_category' },
				success: function(resp) {
					$j('[id=claim_category-container__RAND__], [id=claim_category-container-readonly__RAND__]').html('<span class="match-text" id="claim_category-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_category_view_parent]').hide(); } else { $j('.btn[id=claim_category_view_parent]').show(); }

					if(typeof(claim_category_update_autofills__RAND__) == 'function') claim_category_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function cost_centre_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#cost_centre-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_cost_centre__RAND__.value, t: 'claim', f: 'cost_centre' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="cost_centre"]').val(resp.results[0].id);
							$j('[id=cost_centre-container-readonly__RAND__]').html('<span class="match-text" id="cost_centre-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=cost_centre_view_parent]').hide(); } else { $j('.btn[id=cost_centre_view_parent]').show(); }


							if(typeof(cost_centre_update_autofills__RAND__) == 'function') cost_centre_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'claim', f: 'cost_centre' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_cost_centre__RAND__.value = e.added.id;
				AppGini.current_cost_centre__RAND__.text = e.added.text;
				$j('[name="cost_centre"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=cost_centre_view_parent]').hide(); } else { $j('.btn[id=cost_centre_view_parent]').show(); }


				if(typeof(cost_centre_update_autofills__RAND__) == 'function') cost_centre_update_autofills__RAND__();
			});

			if(!$j("#cost_centre-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_cost_centre__RAND__.value, t: 'claim', f: 'cost_centre' },
					success: function(resp) {
						$j('[name="cost_centre"]').val(resp.results[0].id);
						$j('[id=cost_centre-container-readonly__RAND__]').html('<span class="match-text" id="cost_centre-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=cost_centre_view_parent]').hide(); } else { $j('.btn[id=cost_centre_view_parent]').show(); }

						if(typeof(cost_centre_update_autofills__RAND__) == 'function') cost_centre_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_cost_centre__RAND__.value, t: 'claim', f: 'cost_centre' },
				success: function(resp) {
					$j('[id=cost_centre-container__RAND__], [id=cost_centre-container-readonly__RAND__]').html('<span class="match-text" id="cost_centre-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=cost_centre_view_parent]').hide(); } else { $j('.btn[id=cost_centre_view_parent]').show(); }

					if(typeof(cost_centre_update_autofills__RAND__) == 'function') cost_centre_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function department_name_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#department_name-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_department_name__RAND__.value, t: 'claim', f: 'department_name' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="department_name"]').val(resp.results[0].id);
							$j('[id=department_name-container-readonly__RAND__]').html('<span class="match-text" id="department_name-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=departments_view_parent]').hide(); } else { $j('.btn[id=departments_view_parent]').show(); }


							if(typeof(department_name_update_autofills__RAND__) == 'function') department_name_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'claim', f: 'department_name' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_department_name__RAND__.value = e.added.id;
				AppGini.current_department_name__RAND__.text = e.added.text;
				$j('[name="department_name"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=departments_view_parent]').hide(); } else { $j('.btn[id=departments_view_parent]').show(); }


				if(typeof(department_name_update_autofills__RAND__) == 'function') department_name_update_autofills__RAND__();
			});

			if(!$j("#department_name-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_department_name__RAND__.value, t: 'claim', f: 'department_name' },
					success: function(resp) {
						$j('[name="department_name"]').val(resp.results[0].id);
						$j('[id=department_name-container-readonly__RAND__]').html('<span class="match-text" id="department_name-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=departments_view_parent]').hide(); } else { $j('.btn[id=departments_view_parent]').show(); }

						if(typeof(department_name_update_autofills__RAND__) == 'function') department_name_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_department_name__RAND__.value, t: 'claim', f: 'department_name' },
				success: function(resp) {
					$j('[id=department_name-container__RAND__], [id=department_name-container-readonly__RAND__]').html('<span class="match-text" id="department_name-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=departments_view_parent]').hide(); } else { $j('.btn[id=departments_view_parent]').show(); }

					if(typeof(department_name_update_autofills__RAND__) == 'function') department_name_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function district_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#district-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_district__RAND__.value, t: 'claim', f: 'district' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="district"]').val(resp.results[0].id);
							$j('[id=district-container-readonly__RAND__]').html('<span class="match-text" id="district-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=districts_view_parent]').hide(); } else { $j('.btn[id=districts_view_parent]').show(); }


							if(typeof(district_update_autofills__RAND__) == 'function') district_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'claim', f: 'district' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_district__RAND__.value = e.added.id;
				AppGini.current_district__RAND__.text = e.added.text;
				$j('[name="district"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=districts_view_parent]').hide(); } else { $j('.btn[id=districts_view_parent]').show(); }


				if(typeof(district_update_autofills__RAND__) == 'function') district_update_autofills__RAND__();
			});

			if(!$j("#district-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_district__RAND__.value, t: 'claim', f: 'district' },
					success: function(resp) {
						$j('[name="district"]').val(resp.results[0].id);
						$j('[id=district-container-readonly__RAND__]').html('<span class="match-text" id="district-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=districts_view_parent]').hide(); } else { $j('.btn[id=districts_view_parent]').show(); }

						if(typeof(district_update_autofills__RAND__) == 'function') district_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_district__RAND__.value, t: 'claim', f: 'district' },
				success: function(resp) {
					$j('[id=district-container__RAND__], [id=district-container-readonly__RAND__]').html('<span class="match-text" id="district-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=districts_view_parent]').hide(); } else { $j('.btn[id=districts_view_parent]').show(); }

					if(typeof(district_update_autofills__RAND__) == 'function') district_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function province_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#province-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_province__RAND__.value, t: 'claim', f: 'province' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="province"]').val(resp.results[0].id);
							$j('[id=province-container-readonly__RAND__]').html('<span class="match-text" id="province-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=province_view_parent]').hide(); } else { $j('.btn[id=province_view_parent]').show(); }


							if(typeof(province_update_autofills__RAND__) == 'function') province_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'claim', f: 'province' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_province__RAND__.value = e.added.id;
				AppGini.current_province__RAND__.text = e.added.text;
				$j('[name="province"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=province_view_parent]').hide(); } else { $j('.btn[id=province_view_parent]').show(); }


				if(typeof(province_update_autofills__RAND__) == 'function') province_update_autofills__RAND__();
			});

			if(!$j("#province-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_province__RAND__.value, t: 'claim', f: 'province' },
					success: function(resp) {
						$j('[name="province"]').val(resp.results[0].id);
						$j('[id=province-container-readonly__RAND__]').html('<span class="match-text" id="province-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=province_view_parent]').hide(); } else { $j('.btn[id=province_view_parent]').show(); }

						if(typeof(province_update_autofills__RAND__) == 'function') province_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_province__RAND__.value, t: 'claim', f: 'province' },
				success: function(resp) {
					$j('[id=province-container__RAND__], [id=province-container-readonly__RAND__]').html('<span class="match-text" id="province-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=province_view_parent]').hide(); } else { $j('.btn[id=province_view_parent]').show(); }

					if(typeof(province_update_autofills__RAND__) == 'function') province_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function merchant_name_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#merchant_name-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_merchant_name__RAND__.value, t: 'claim', f: 'merchant_name' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="merchant_name"]').val(resp.results[0].id);
							$j('[id=merchant_name-container-readonly__RAND__]').html('<span class="match-text" id="merchant_name-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=merchant_view_parent]').hide(); } else { $j('.btn[id=merchant_view_parent]').show(); }


							if(typeof(merchant_name_update_autofills__RAND__) == 'function') merchant_name_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'claim', f: 'merchant_name' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_merchant_name__RAND__.value = e.added.id;
				AppGini.current_merchant_name__RAND__.text = e.added.text;
				$j('[name="merchant_name"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=merchant_view_parent]').hide(); } else { $j('.btn[id=merchant_view_parent]').show(); }


				if(typeof(merchant_name_update_autofills__RAND__) == 'function') merchant_name_update_autofills__RAND__();
			});

			if(!$j("#merchant_name-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_merchant_name__RAND__.value, t: 'claim', f: 'merchant_name' },
					success: function(resp) {
						$j('[name="merchant_name"]').val(resp.results[0].id);
						$j('[id=merchant_name-container-readonly__RAND__]').html('<span class="match-text" id="merchant_name-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=merchant_view_parent]').hide(); } else { $j('.btn[id=merchant_view_parent]').show(); }

						if(typeof(merchant_name_update_autofills__RAND__) == 'function') merchant_name_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_merchant_name__RAND__.value, t: 'claim', f: 'merchant_name' },
				success: function(resp) {
					$j('[id=merchant_name-container__RAND__], [id=merchant_name-container-readonly__RAND__]').html('<span class="match-text" id="merchant_name-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=merchant_view_parent]').hide(); } else { $j('.btn[id=merchant_view_parent]').show(); }

					if(typeof(merchant_name_update_autofills__RAND__) == 'function') merchant_name_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function vehicle_registration_number_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#vehicle_registration_number-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_vehicle_registration_number__RAND__.value, t: 'claim', f: 'vehicle_registration_number' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="vehicle_registration_number"]').val(resp.results[0].id);
							$j('[id=vehicle_registration_number-container-readonly__RAND__]').html('<span class="match-text" id="vehicle_registration_number-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

						if(typeof(closing_km_reload__RAND__) == 'function') closing_km_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);

							if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'claim', f: 'vehicle_registration_number' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_vehicle_registration_number__RAND__.value = e.added.id;
				AppGini.current_vehicle_registration_number__RAND__.text = e.added.text;
				$j('[name="vehicle_registration_number"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

						if(typeof(closing_km_reload__RAND__) == 'function') closing_km_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);

				if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
			});

			if(!$j("#vehicle_registration_number-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_vehicle_registration_number__RAND__.value, t: 'claim', f: 'vehicle_registration_number' },
					success: function(resp) {
						$j('[name="vehicle_registration_number"]').val(resp.results[0].id);
						$j('[id=vehicle_registration_number-container-readonly__RAND__]').html('<span class="match-text" id="vehicle_registration_number-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

						if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_vehicle_registration_number__RAND__.value, t: 'claim', f: 'vehicle_registration_number' },
				success: function(resp) {
					$j('[id=vehicle_registration_number-container__RAND__], [id=vehicle_registration_number-container-readonly__RAND__]').html('<span class="match-text" id="vehicle_registration_number-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

					if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function closing_km_reload__RAND__(filterer_vehicle_registration_number) {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#closing_km-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_vehicle_registration_number: filterer_vehicle_registration_number, id: AppGini.current_closing_km__RAND__.value, t: 'claim', f: 'closing_km' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="closing_km"]').val(resp.results[0].id);
							$j('[id=closing_km-container-readonly__RAND__]').html('<span class="match-text" id="closing_km-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }


							if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_vehicle_registration_number: filterer_vehicle_registration_number, s: term, p: page, t: 'claim', f: 'closing_km' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_closing_km__RAND__.value = e.added.id;
				AppGini.current_closing_km__RAND__.text = e.added.text;
				$j('[name="closing_km"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }


				if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
			});

			if(!$j("#closing_km-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_closing_km__RAND__.value, t: 'claim', f: 'closing_km' },
					success: function(resp) {
						$j('[name="closing_km"]').val(resp.results[0].id);
						$j('[id=closing_km-container-readonly__RAND__]').html('<span class="match-text" id="closing_km-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }

						if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_closing_km__RAND__.value, t: 'claim', f: 'closing_km' },
				success: function(resp) {
					$j('[id=closing_km-container__RAND__], [id=closing_km-container-readonly__RAND__]').html('<span class="match-text" id="closing_km-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }

					if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_clean());


	// code for template based detail view forms

	// open the detail view template
	if($dvprint) {
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/claim_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	} else {
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/claim_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Claim Details:', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', (Request::val('Embedded') ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($arrPerm['insert'] && !$selected_id) { // allow insert and no record selected?
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return claim_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return claim_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if(Request::val('Embedded')) {
		$backAction = 'AppGini.closeParentModal(); return false;';
	} else {
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id) {
		if(!Request::val('Embedded')) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate) {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return claim_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm['delete'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['delete'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['delete'] == 3) { // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);

		// if not in embedded mode and user has insert only but no view/update/delete,
		// remove 'back' button
		if(
			$arrPerm['insert']
			&& !$arrPerm['update'] && !$arrPerm['delete'] && !$arrPerm['view']
			&& !Request::val('Embedded')
		)
			$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '', $templateCode);
		elseif($separateDV)
			$templateCode = str_replace(
				'<%%DESELECT_BUTTON%%>', 
				'<button
					type="submit" 
					class="btn btn-default" 
					id="deselect" 
					name="deselect_x" 
					value="1" 
					onclick="' . $backAction . '" 
					title="' . html_attr($Translation['Back']) . '">
						<i class="glyphicon glyphicon-chevron-left"></i> ' .
						$Translation['Back'] .
				'</button>',
				$templateCode
			);
		else
			$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '', $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate) || (!$selected_id && !$AllowInsert)) {
		$jsReadOnly = '';
		$jsReadOnly .= "\tjQuery('#claim_code').replaceWith('<div class=\"form-control-static\" id=\"claim_code\">' + (jQuery('#claim_code').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#claim_status').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#claim_status_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#claim_category').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#claim_category_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#cost_centre').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#cost_centre_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#client_identification').replaceWith('<div class=\"form-control-static\" id=\"client_identification\">' + (jQuery('#client_identification').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#department_name').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#department_name_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#district').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#district_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#province').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#province_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#merchant_name').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#merchant_name_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#vehicle_registration_number').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#vehicle_registration_number_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#closing_km').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#closing_km_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#pre_authorization_date').prop('readonly', true);\n";
		$jsReadOnly .= "\tjQuery('#pre_authorization_dateDay, #pre_authorization_dateMonth, #pre_authorization_dateYear').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#invoice_date').prop('readonly', true);\n";
		$jsReadOnly .= "\tjQuery('#invoice_dateDay, #invoice_dateMonth, #invoice_dateYear').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#upload_invoice').replaceWith('<div class=\"form-control-static\" id=\"upload_invoice\">' + (jQuery('#upload_invoice').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#upload_invoice, #upload_invoice-edit-link').hide();\n";
		$jsReadOnly .= "\tjQuery('#payment_date').prop('readonly', true);\n";
		$jsReadOnly .= "\tjQuery('#payment_dateDay, #payment_dateMonth, #payment_dateYear').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#authorization_number').replaceWith('<div class=\"form-control-static\" id=\"authorization_number\">' + (jQuery('#authorization_number').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#clearance_number').replaceWith('<div class=\"form-control-static\" id=\"clearance_number\">' + (jQuery('#clearance_number').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#vehicle_collected_date').prop('readonly', true);\n";
		$jsReadOnly .= "\tjQuery('#vehicle_collected_dateDay, #vehicle_collected_dateMonth, #vehicle_collected_dateYear').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#total_claimed').replaceWith('<div class=\"form-control-static\" id=\"total_claimed\">' + (jQuery('#total_claimed').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#total_authorized').replaceWith('<div class=\"form-control-static\" id=\"total_authorized\">' + (jQuery('#total_authorized').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	} elseif(($AllowInsert && !$selected_id) || ($AllowUpdate && $selected_id)) {
		$jsEditable = "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(claim_status)%%>', $combo_claim_status->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(claim_status)%%>', $combo_claim_status->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(claim_status)%%>', urlencode($combo_claim_status->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(claim_category)%%>', $combo_claim_category->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(claim_category)%%>', $combo_claim_category->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(claim_category)%%>', urlencode($combo_claim_category->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(cost_centre)%%>', $combo_cost_centre->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(cost_centre)%%>', $combo_cost_centre->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(cost_centre)%%>', urlencode($combo_cost_centre->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(department_name)%%>', $combo_department_name->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(department_name)%%>', $combo_department_name->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(department_name)%%>', urlencode($combo_department_name->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(district)%%>', $combo_district->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(district)%%>', $combo_district->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(district)%%>', urlencode($combo_district->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(province)%%>', $combo_province->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(province)%%>', $combo_province->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(province)%%>', urlencode($combo_province->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(merchant_name)%%>', $combo_merchant_name->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(merchant_name)%%>', $combo_merchant_name->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(merchant_name)%%>', urlencode($combo_merchant_name->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(vehicle_registration_number)%%>', $combo_vehicle_registration_number->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(vehicle_registration_number)%%>', $combo_vehicle_registration_number->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(vehicle_registration_number)%%>', urlencode($combo_vehicle_registration_number->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(closing_km)%%>', $combo_closing_km->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(closing_km)%%>', $combo_closing_km->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(closing_km)%%>', urlencode($combo_closing_km->MatchText), $templateCode);
	$templateCode = str_replace(
		'<%%COMBO(pre_authorization_date)%%>', 
		($selected_id && !$arrPerm['edit'] && ($noSaveAsCopy || !$arrPerm['insert']) ? 
			'<div class="form-control-static">' . $combo_pre_authorization_date->GetHTML(true) . '</div>' : 
			$combo_pre_authorization_date->GetHTML()
		), $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(pre_authorization_date)%%>', $combo_pre_authorization_date->GetHTML(true), $templateCode);
	$templateCode = str_replace(
		'<%%COMBO(invoice_date)%%>', 
		($selected_id && !$arrPerm['edit'] && ($noSaveAsCopy || !$arrPerm['insert']) ? 
			'<div class="form-control-static">' . $combo_invoice_date->GetHTML(true) . '</div>' : 
			$combo_invoice_date->GetHTML()
		), $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(invoice_date)%%>', $combo_invoice_date->GetHTML(true), $templateCode);
	$templateCode = str_replace(
		'<%%COMBO(payment_date)%%>', 
		($selected_id && !$arrPerm['edit'] && ($noSaveAsCopy || !$arrPerm['insert']) ? 
			'<div class="form-control-static">' . $combo_payment_date->GetHTML(true) . '</div>' : 
			$combo_payment_date->GetHTML()
		), $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(payment_date)%%>', $combo_payment_date->GetHTML(true), $templateCode);
	$templateCode = str_replace(
		'<%%COMBO(vehicle_collected_date)%%>', 
		($selected_id && !$arrPerm['edit'] && ($noSaveAsCopy || !$arrPerm['insert']) ? 
			'<div class="form-control-static">' . $combo_vehicle_collected_date->GetHTML(true) . '</div>' : 
			$combo_vehicle_collected_date->GetHTML()
		), $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(vehicle_collected_date)%%>', $combo_vehicle_collected_date->GetHTML(true), $templateCode);

	/* lookup fields array: 'lookup field name' => ['parent table name', 'lookup field caption'] */
	$lookup_fields = ['claim_status' => ['claim_status', 'Claim Status:'], 'claim_category' => ['claim_category', 'Claim Category:'], 'cost_centre' => ['cost_centre', 'Cost Centre'], 'department_name' => ['departments', 'Department Name:'], 'district' => ['districts', 'District:'], 'province' => ['province', 'Province Name:'], 'merchant_name' => ['merchant', 'Merchant Name:'], 'vehicle_registration_number' => ['gmt_fleet_register', 'Vehicle Registration Number:'], 'closing_km' => ['log_sheet', 'Closing km:'], ];
	foreach($lookup_fields as $luf => $ptfc) {
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']) {
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] /* && !Request::val('Embedded')*/) {
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-default add_new_parent" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus text-success"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(claim_id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(claim_code)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(claim_status)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(claim_category)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(cost_centre)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(client_identification)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(department_name)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(district)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(province)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(merchant_name)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(vehicle_registration_number)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(closing_km)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(pre_authorization_date)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(instruction_note)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(invoice_date)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(upload_invoice)%%>', ($noUploads ? '' : "<div>{$Translation['upload image']}</div>" . '<i class="glyphicon glyphicon-remove text-danger clear-upload hidden"></i> <input type="file" name="upload_invoice" id="upload_invoice" data-filetypes="txt|doc|docx|docm|odt|pdf|rtf" data-maxsize="5242880" accept=".txt,.doc,.docx,.docm,.odt,.pdf,.rtf">'), $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(payment_date)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(authorization_number)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(clearance_number)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(vehicle_collected_date)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(total_claimed)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(total_authorized)%%>', '', $templateCode);

	// process values
	if($selected_id) {
		if( $dvprint) $templateCode = str_replace('<%%VALUE(claim_id)%%>', safe_html($urow['claim_id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(claim_id)%%>', html_attr($row['claim_id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(claim_id)%%>', urlencode($urow['claim_id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(claim_code)%%>', safe_html($urow['claim_code']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(claim_code)%%>', html_attr($row['claim_code']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(claim_code)%%>', urlencode($urow['claim_code']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(claim_status)%%>', safe_html($urow['claim_status']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(claim_status)%%>', html_attr($row['claim_status']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(claim_status)%%>', urlencode($urow['claim_status']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(claim_category)%%>', safe_html($urow['claim_category']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(claim_category)%%>', html_attr($row['claim_category']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(claim_category)%%>', urlencode($urow['claim_category']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(cost_centre)%%>', safe_html($urow['cost_centre']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(cost_centre)%%>', html_attr($row['cost_centre']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(cost_centre)%%>', urlencode($urow['cost_centre']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(client_identification)%%>', safe_html($urow['client_identification']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(client_identification)%%>', html_attr($row['client_identification']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(client_identification)%%>', urlencode($urow['client_identification']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(department_name)%%>', safe_html($urow['department_name']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(department_name)%%>', html_attr($row['department_name']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(department_name)%%>', urlencode($urow['department_name']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(district)%%>', safe_html($urow['district']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(district)%%>', html_attr($row['district']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(district)%%>', urlencode($urow['district']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(province)%%>', safe_html($urow['province']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(province)%%>', html_attr($row['province']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(province)%%>', urlencode($urow['province']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(merchant_name)%%>', safe_html($urow['merchant_name']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(merchant_name)%%>', html_attr($row['merchant_name']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(merchant_name)%%>', urlencode($urow['merchant_name']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(vehicle_registration_number)%%>', safe_html($urow['vehicle_registration_number']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(vehicle_registration_number)%%>', html_attr($row['vehicle_registration_number']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(vehicle_registration_number)%%>', urlencode($urow['vehicle_registration_number']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(closing_km)%%>', safe_html($urow['closing_km']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(closing_km)%%>', html_attr($row['closing_km']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(closing_km)%%>', urlencode($urow['closing_km']), $templateCode);
		$templateCode = str_replace('<%%VALUE(pre_authorization_date)%%>', app_datetime($row['pre_authorization_date']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(pre_authorization_date)%%>', urlencode(app_datetime($urow['pre_authorization_date'])), $templateCode);
		if($AllowUpdate || $AllowInsert) {
			$templateCode = str_replace('<%%HTMLAREA(instruction_note)%%>', '<textarea name="instruction_note" id="instruction_note" rows="5">' . safe_html(htmlspecialchars_decode($row['instruction_note'])) . '</textarea>', $templateCode);
		} else {
			$templateCode = str_replace('<%%HTMLAREA(instruction_note)%%>', '<div id="instruction_note" class="form-control-static">' . $row['instruction_note'] . '</div>', $templateCode);
		}
		$templateCode = str_replace('<%%VALUE(instruction_note)%%>', nl2br($row['instruction_note']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(instruction_note)%%>', urlencode($urow['instruction_note']), $templateCode);
		$templateCode = str_replace('<%%VALUE(invoice_date)%%>', app_datetime($row['invoice_date']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(invoice_date)%%>', urlencode(app_datetime($urow['invoice_date'])), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(upload_invoice)%%>', safe_html($urow['upload_invoice']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(upload_invoice)%%>', html_attr($row['upload_invoice']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(upload_invoice)%%>', urlencode($urow['upload_invoice']), $templateCode);
		$templateCode = str_replace('<%%VALUE(payment_date)%%>', app_datetime($row['payment_date']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(payment_date)%%>', urlencode(app_datetime($urow['payment_date'])), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(authorization_number)%%>', safe_html($urow['authorization_number']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(authorization_number)%%>', html_attr($row['authorization_number']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authorization_number)%%>', urlencode($urow['authorization_number']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(clearance_number)%%>', safe_html($urow['clearance_number']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(clearance_number)%%>', html_attr($row['clearance_number']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(clearance_number)%%>', urlencode($urow['clearance_number']), $templateCode);
		$templateCode = str_replace('<%%VALUE(vehicle_collected_date)%%>', app_datetime($row['vehicle_collected_date']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(vehicle_collected_date)%%>', urlencode(app_datetime($urow['vehicle_collected_date'])), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(total_claimed)%%>', safe_html($urow['total_claimed']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(total_claimed)%%>', html_attr($row['total_claimed']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(total_claimed)%%>', urlencode($urow['total_claimed']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(total_authorized)%%>', safe_html($urow['total_authorized']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(total_authorized)%%>', html_attr($row['total_authorized']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(total_authorized)%%>', urlencode($urow['total_authorized']), $templateCode);
	} else {
		$templateCode = str_replace('<%%VALUE(claim_id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(claim_id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(claim_code)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(claim_code)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(claim_status)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(claim_status)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(claim_category)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(claim_category)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(cost_centre)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(cost_centre)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(client_identification)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(client_identification)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(department_name)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(department_name)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(district)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(district)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(province)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(province)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(merchant_name)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(merchant_name)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(vehicle_registration_number)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(vehicle_registration_number)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(closing_km)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(closing_km)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(pre_authorization_date)%%>', '0000-00-00', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(pre_authorization_date)%%>', urlencode('0000-00-00'), $templateCode);
		$templateCode = str_replace('<%%HTMLAREA(instruction_note)%%>', '<textarea name="instruction_note" id="instruction_note" rows="5"></textarea>', $templateCode);
		$templateCode = str_replace('<%%VALUE(invoice_date)%%>', '0000-00-00', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(invoice_date)%%>', urlencode('0000-00-00'), $templateCode);
		$templateCode = str_replace('<%%VALUE(upload_invoice)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(upload_invoice)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(payment_date)%%>', '0000-00-00', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(payment_date)%%>', urlencode('0000-00-00'), $templateCode);
		$templateCode = str_replace('<%%VALUE(authorization_number)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authorization_number)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(clearance_number)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(clearance_number)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(vehicle_collected_date)%%>', '0000-00-00', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(vehicle_collected_date)%%>', urlencode('0000-00-00'), $templateCode);
		$templateCode = str_replace('<%%VALUE(total_claimed)%%>', '0.00', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(total_claimed)%%>', urlencode('0.00'), $templateCode);
		$templateCode = str_replace('<%%VALUE(total_authorized)%%>', '0.00', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(total_authorized)%%>', urlencode('0.00'), $templateCode);
	}

	// process translations
	$templateCode = parseTemplate($templateCode);

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if(Request::val('dvprint_x') == '') {
		$templateCode .= "\n\n<script>\$j(function() {\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption) {
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id) {
			$templateCode.="\n\tif(document.getElementById('upload_invoiceEdit')) { document.getElementById('upload_invoiceEdit').style.display='inline'; }";
			$templateCode.="\n\tif(document.getElementById('upload_invoiceEditLink')) { document.getElementById('upload_invoiceEditLink').style.display='none'; }";
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';

	$templateCode .= "\tvehicle_registration_number_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'claim_autofill.php?rnd1=$rnd1&mfk=vehicle_registration_number&id=' + encodeURIComponent('".addslashes($row['vehicle_registration_number'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'claim_autofill.php?rnd1=$rnd1&mfk=vehicle_registration_number&id=' + encodeURIComponent(AppGini.current_vehicle_registration_number{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#vehicle_registration_number$rnd1').prop('disabled', true); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm['insert'] || (($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3)) ? "\$j('#vehicle_registration_number$rnd1').prop('disabled', false); " : "\$j('#vehicle_registration_number$rnd1').prop('disabled', true); ")." \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#vehicle_registration_number_caption').length) \$j('#vehicle_registration_number_caption').click(function() { vehicle_registration_number_update_autofills$rnd1(); });\n";


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields
	$filterField = Request::val('FilterField');
	$filterOperator = Request::val('FilterOperator');
	$filterValue = Request::val('FilterValue');

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('claim');
	if($selected_id) {
		$jdata = get_joined_record('claim', $selected_id);
		if($jdata === false) $jdata = get_defaults('claim');
		$rdata = $row;
	}
	$templateCode .= loadView('claim-ajax-cache', ['rdata' => $rdata, 'jdata' => $jdata]);

	// hook: claim_dv
	if(function_exists('claim_dv')) {
		$args = [];
		claim_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}