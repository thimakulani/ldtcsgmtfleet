<?php

// Data functions (insert, update, delete, form) for table schedule

// This script and data application were generated by AppGini 22.13
// Download AppGini for free from https://bigprof.com/appgini/download/

function schedule_insert(&$error_message = '') {
	global $Translation;

	// mm: can member insert record?
	$arrPerm = getTablePermissions('schedule');
	if(!$arrPerm['insert']) return false;

	$data = [
		'title' => Request::val('title', ''),
		'user_name_and_surname' => Request::lookup('user_name_and_surname', ''),
		'user_contact_email' => Request::lookup('user_name_and_surname'),
		'service_item_type' => Request::lookup('service_item_type', ''),
		'service_item_type_code' => Request::lookup('service_item_type'),
		'application_status' => Request::val('application_status', ''),
		'vehicle_registration_number' => Request::lookup('vehicle_registration_number', ''),
		'engine_number' => Request::lookup('user_name_and_surname'),
		'closing_km' => Request::lookup('closing_km', ''),
		'date' => Request::dateComponents('date', ''),
		'time' => Request::val('time', '12:00:00'),
		'workshop_name' => Request::lookup('workshop_name', ''),
		'diagnosis' => Request::val('diagnosis', ''),
		'prescription' => Request::val('prescription', ''),
		'comments' => Request::val('comments', ''),
	];

	if($data['application_status'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Application Status:': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}

	// hook: schedule_before_insert
	if(function_exists('schedule_before_insert')) {
		$args = [];
		if(!schedule_before_insert($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$error = '';
	// set empty fields to NULL
	$data = array_map(function($v) { return ($v === '' ? NULL : $v); }, $data);
	insert('schedule', backtick_keys_once($data), $error);
	if($error) {
		$error_message = $error;
		return false;
	}

	$recID = db_insert_id(db_link());

	update_calc_fields('schedule', $recID, calculated_fields()['schedule']);

	// hook: schedule_after_insert
	if(function_exists('schedule_after_insert')) {
		$res = sql("SELECT * FROM `schedule` WHERE `schedule_id`='" . makeSafe($recID, false) . "' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) {
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args = [];
		if(!schedule_after_insert($data, getMemberInfo(), $args)) { return $recID; }
	}

	// mm: save ownership data
	set_record_owner('schedule', $recID, getLoggedMemberID());

	// if this record is a copy of another record, copy children if applicable
	if(strlen(Request::val('SelectedID'))) schedule_copy_children($recID, Request::val('SelectedID'));

	return $recID;
}

function schedule_copy_children($destination_id, $source_id) {
	global $Translation;
	$requests = []; // array of curl handlers for launching insert requests
	$eo = ['silentErrors' => true];
	$safe_sid = makeSafe($source_id);

	// launch requests, asynchronously
	curl_batch($requests);
}

function schedule_delete($selected_id, $AllowDeleteOfParents = false, $skipChecks = false) {
	// insure referential integrity ...
	global $Translation;
	$selected_id = makeSafe($selected_id);

	// mm: can member delete record?
	if(!check_record_permission('schedule', $selected_id, 'delete')) {
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: schedule_before_delete
	if(function_exists('schedule_before_delete')) {
		$args = [];
		if(!schedule_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'] . (
				!empty($args['error_message']) ?
					'<div class="text-bold">' . strip_tags($args['error_message']) . '</div>'
					: '' 
			);
	}

	// child table: service
	$res = sql("SELECT `schedule_id` FROM `schedule` WHERE `schedule_id`='{$selected_id}'", $eo);
	$schedule_id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `service` WHERE `date_of_service`='" . makeSafe($schedule_id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'service', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'service', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="btn btn-danger" value="' . html_attr($Translation['yes']) . '" onClick="window.location = \'schedule_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1&csrf_token=' . urlencode(csrf_token(false, true)) . '\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="btn btn-success" value="' . html_attr($Translation[ 'no']) . '" onClick="window.location = \'schedule_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	sql("DELETE FROM `schedule` WHERE `schedule_id`='{$selected_id}'", $eo);

	// hook: schedule_after_delete
	if(function_exists('schedule_after_delete')) {
		$args = [];
		schedule_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("DELETE FROM `membership_userrecords` WHERE `tableName`='schedule' AND `pkValue`='{$selected_id}'", $eo);
}

function schedule_update(&$selected_id, &$error_message = '') {
	global $Translation;

	// mm: can member edit record?
	if(!check_record_permission('schedule', $selected_id, 'edit')) return false;

	$data = [
		'title' => Request::val('title', ''),
		'user_name_and_surname' => Request::lookup('user_name_and_surname', ''),
		'user_contact_email' => Request::lookup('user_name_and_surname'),
		'service_item_type' => Request::lookup('service_item_type', ''),
		'service_item_type_code' => Request::lookup('service_item_type'),
		'application_status' => Request::val('application_status', ''),
		'vehicle_registration_number' => Request::lookup('vehicle_registration_number', ''),
		'engine_number' => Request::lookup('user_name_and_surname'),
		'closing_km' => Request::lookup('closing_km', ''),
		'date' => Request::dateComponents('date', ''),
		'time' => Request::val('time', ''),
		'workshop_name' => Request::lookup('workshop_name', ''),
		'diagnosis' => Request::val('diagnosis', ''),
		'prescription' => Request::val('prescription', ''),
		'comments' => Request::val('comments', ''),
	];

	if($data['application_status'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Application Status:': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	// get existing values
	$old_data = getRecord('schedule', $selected_id);
	if(is_array($old_data)) {
		$old_data = array_map('makeSafe', $old_data);
		$old_data['selectedID'] = makeSafe($selected_id);
	}

	$data['selectedID'] = makeSafe($selected_id);

	// hook: schedule_before_update
	if(function_exists('schedule_before_update')) {
		$args = ['old_data' => $old_data];
		if(!schedule_before_update($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$set = $data; unset($set['selectedID']);
	foreach ($set as $field => $value) {
		$set[$field] = ($value !== '' && $value !== NULL) ? $value : NULL;
	}

	if(!update(
		'schedule', 
		backtick_keys_once($set), 
		['`schedule_id`' => $selected_id], 
		$error_message
	)) {
		echo $error_message;
		echo '<a href="schedule_view.php?SelectedID=' . urlencode($selected_id) . "\">{$Translation['< back']}</a>";
		exit;
	}


	$eo = ['silentErrors' => true];

	update_calc_fields('schedule', $data['selectedID'], calculated_fields()['schedule']);

	// hook: schedule_after_update
	if(function_exists('schedule_after_update')) {
		$res = sql("SELECT * FROM `schedule` WHERE `schedule_id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) $data = array_map('makeSafe', $row);

		$data['selectedID'] = $data['schedule_id'];
		$args = ['old_data' => $old_data];
		if(!schedule_after_update($data, getMemberInfo(), $args)) return;
	}

	// mm: update ownership data
	sql("UPDATE `membership_userrecords` SET `dateUpdated`='" . time() . "' WHERE `tableName`='schedule' AND `pkValue`='" . makeSafe($selected_id) . "'", $eo);
}

function schedule_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $separateDV = 0, $TemplateDV = '', $TemplateDVP = '') {
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;
	$eo = ['silentErrors' => true];
	$noUploads = null;
	$row = $urow = $jsReadOnly = $jsEditable = $lookups = null;

	$noSaveAsCopy = true;

	// mm: get table permissions
	$arrPerm = getTablePermissions('schedule');
	if(!$arrPerm['insert'] && $selected_id == '')
		// no insert permission and no record selected
		// so show access denied error unless TVDV
		return $separateDV ? $Translation['tableAccessDenied'] : '';
	$AllowInsert = ($arrPerm['insert'] ? true : false);
	// print preview?
	$dvprint = false;
	if(strlen($selected_id) && Request::val('dvprint_x') != '') {
		$dvprint = true;
	}

	$filterer_user_name_and_surname = Request::val('filterer_user_name_and_surname');
	$filterer_service_item_type = Request::val('filterer_service_item_type');
	$filterer_vehicle_registration_number = Request::val('filterer_vehicle_registration_number');
	$filterer_closing_km = Request::val('filterer_closing_km');
	$filterer_workshop_name = Request::val('filterer_workshop_name');

	// populate filterers, starting from children to grand-parents

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: title
	$combo_title = new Combo;
	$combo_title->ListType = 0;
	$combo_title->MultipleSeparator = ', ';
	$combo_title->ListBoxHeight = 10;
	$combo_title->RadiosPerLine = 1;
	if(is_file(__DIR__ . '/hooks/schedule.title.csv')) {
		$title_data = addslashes(implode('', @file(__DIR__ . '/hooks/schedule.title.csv')));
		$combo_title->ListItem = array_trim(explode('||', entitiesToUTF8(convertLegacyOptions($title_data))));
		$combo_title->ListData = $combo_title->ListItem;
	} else {
		$combo_title->ListItem = array_trim(explode('||', entitiesToUTF8(convertLegacyOptions("Minor Service;;Major Service;;Comprehensive Service;;Tune Up Service;;Auto Transmission Service"))));
		$combo_title->ListData = $combo_title->ListItem;
	}
	$combo_title->SelectName = 'title';
	// combobox: user_name_and_surname
	$combo_user_name_and_surname = new DataCombo;
	// combobox: service_item_type
	$combo_service_item_type = new DataCombo;
	// combobox: application_status
	$combo_application_status = new Combo;
	$combo_application_status->ListType = 2;
	$combo_application_status->MultipleSeparator = ', ';
	$combo_application_status->ListBoxHeight = 10;
	$combo_application_status->RadiosPerLine = 1;
	if(is_file(__DIR__ . '/hooks/schedule.application_status.csv')) {
		$application_status_data = addslashes(implode('', @file(__DIR__ . '/hooks/schedule.application_status.csv')));
		$combo_application_status->ListItem = array_trim(explode('||', entitiesToUTF8(convertLegacyOptions($application_status_data))));
		$combo_application_status->ListData = $combo_application_status->ListItem;
	} else {
		$combo_application_status->ListItem = array_trim(explode('||', entitiesToUTF8(convertLegacyOptions("Active;;Cancelled"))));
		$combo_application_status->ListData = $combo_application_status->ListItem;
	}
	$combo_application_status->SelectName = 'application_status';
	$combo_application_status->AllowNull = false;
	// combobox: vehicle_registration_number
	$combo_vehicle_registration_number = new DataCombo;
	// combobox: closing_km
	$combo_closing_km = new DataCombo;
	// combobox: date
	$combo_date = new DateCombo;
	$combo_date->DateFormat = "dmy";
	$combo_date->MinYear = defined('schedule.date.MinYear') ? constant('schedule.date.MinYear') : 1900;
	$combo_date->MaxYear = defined('schedule.date.MaxYear') ? constant('schedule.date.MaxYear') : 2100;
	$combo_date->DefaultDate = parseMySQLDate('', '');
	$combo_date->MonthNames = $Translation['month names'];
	$combo_date->NamePrefix = 'date';
	// combobox: workshop_name
	$combo_workshop_name = new DataCombo;

	if($selected_id) {
		// mm: check member permissions
		if(!$arrPerm['view']) return $Translation['tableAccessDenied'];

		// mm: who is the owner?
		$ownerGroupID = sqlValue("SELECT `groupID` FROM `membership_userrecords` WHERE `tableName`='schedule' AND `pkValue`='" . makeSafe($selected_id) . "'");
		$ownerMemberID = sqlValue("SELECT LCASE(`memberID`) FROM `membership_userrecords` WHERE `tableName`='schedule' AND `pkValue`='" . makeSafe($selected_id) . "'");

		if($arrPerm['view'] == 1 && getLoggedMemberID() != $ownerMemberID) return $Translation['tableAccessDenied'];
		if($arrPerm['view'] == 2 && getLoggedGroupID() != $ownerGroupID) return $Translation['tableAccessDenied'];

		// can edit?
		$AllowUpdate = 0;
		if(($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3) {
			$AllowUpdate = 1;
		}

		$res = sql("SELECT * FROM `schedule` WHERE `schedule_id`='" . makeSafe($selected_id) . "'", $eo);
		if(!($row = db_fetch_array($res))) {
			return error_message($Translation['No records found'], 'schedule_view.php', false);
		}
		$combo_title->SelectedData = $row['title'];
		$combo_user_name_and_surname->SelectedData = $row['user_name_and_surname'];
		$combo_service_item_type->SelectedData = $row['service_item_type'];
		$combo_application_status->SelectedData = $row['application_status'];
		$combo_vehicle_registration_number->SelectedData = $row['vehicle_registration_number'];
		$combo_closing_km->SelectedData = $row['closing_km'];
		$combo_date->DefaultDate = $row['date'];
		$combo_workshop_name->SelectedData = $row['workshop_name'];
		$urow = $row; /* unsanitized data */
		$row = array_map('safe_html', $row);
	} else {
		$filterField = Request::val('FilterField');
		$filterOperator = Request::val('FilterOperator');
		$filterValue = Request::val('FilterValue');
		$combo_title->SelectedText = (isset($filterField[1]) && $filterField[1] == '2' && $filterOperator[1] == '<=>' ? $filterValue[1] : '');
		$combo_user_name_and_surname->SelectedData = $filterer_user_name_and_surname;
		$combo_service_item_type->SelectedData = $filterer_service_item_type;
		$combo_application_status->SelectedText = (isset($filterField[1]) && $filterField[1] == '7' && $filterOperator[1] == '<=>' ? $filterValue[1] : '');
		$combo_vehicle_registration_number->SelectedData = $filterer_vehicle_registration_number;
		$combo_closing_km->SelectedData = $filterer_closing_km;
		$combo_workshop_name->SelectedData = $filterer_workshop_name;
	}
	$combo_title->Render();
	$combo_user_name_and_surname->HTML = '<span id="user_name_and_surname-container' . $rnd1 . '"></span><input type="hidden" name="user_name_and_surname" id="user_name_and_surname' . $rnd1 . '" value="' . html_attr($combo_user_name_and_surname->SelectedData) . '">';
	$combo_user_name_and_surname->MatchText = '<span id="user_name_and_surname-container-readonly' . $rnd1 . '"></span><input type="hidden" name="user_name_and_surname" id="user_name_and_surname' . $rnd1 . '" value="' . html_attr($combo_user_name_and_surname->SelectedData) . '">';
	$combo_service_item_type->HTML = '<span id="service_item_type-container' . $rnd1 . '"></span><input type="hidden" name="service_item_type" id="service_item_type' . $rnd1 . '" value="' . html_attr($combo_service_item_type->SelectedData) . '">';
	$combo_service_item_type->MatchText = '<span id="service_item_type-container-readonly' . $rnd1 . '"></span><input type="hidden" name="service_item_type" id="service_item_type' . $rnd1 . '" value="' . html_attr($combo_service_item_type->SelectedData) . '">';
	$combo_application_status->Render();
	$combo_vehicle_registration_number->HTML = '<span id="vehicle_registration_number-container' . $rnd1 . '"></span><input type="hidden" name="vehicle_registration_number" id="vehicle_registration_number' . $rnd1 . '" value="' . html_attr($combo_vehicle_registration_number->SelectedData) . '">';
	$combo_vehicle_registration_number->MatchText = '<span id="vehicle_registration_number-container-readonly' . $rnd1 . '"></span><input type="hidden" name="vehicle_registration_number" id="vehicle_registration_number' . $rnd1 . '" value="' . html_attr($combo_vehicle_registration_number->SelectedData) . '">';
	$combo_closing_km->HTML = '<span id="closing_km-container' . $rnd1 . '"></span><input type="hidden" name="closing_km" id="closing_km' . $rnd1 . '" value="' . html_attr($combo_closing_km->SelectedData) . '">';
	$combo_closing_km->MatchText = '<span id="closing_km-container-readonly' . $rnd1 . '"></span><input type="hidden" name="closing_km" id="closing_km' . $rnd1 . '" value="' . html_attr($combo_closing_km->SelectedData) . '">';
	$combo_workshop_name->HTML = '<span id="workshop_name-container' . $rnd1 . '"></span><input type="hidden" name="workshop_name" id="workshop_name' . $rnd1 . '" value="' . html_attr($combo_workshop_name->SelectedData) . '">';
	$combo_workshop_name->MatchText = '<span id="workshop_name-container-readonly' . $rnd1 . '"></span><input type="hidden" name="workshop_name" id="workshop_name' . $rnd1 . '" value="' . html_attr($combo_workshop_name->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_user_name_and_surname__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['user_name_and_surname'] : htmlspecialchars($filterer_user_name_and_surname, ENT_QUOTES)); ?>"};
		AppGini.current_service_item_type__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['service_item_type'] : htmlspecialchars($filterer_service_item_type, ENT_QUOTES)); ?>"};
		AppGini.current_vehicle_registration_number__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['vehicle_registration_number'] : htmlspecialchars($filterer_vehicle_registration_number, ENT_QUOTES)); ?>"};
		AppGini.current_closing_km__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['closing_km'] : htmlspecialchars($filterer_closing_km, ENT_QUOTES)); ?>"};
		AppGini.current_workshop_name__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['workshop_name'] : htmlspecialchars($filterer_workshop_name, ENT_QUOTES)); ?>"};

		jQuery(function() {
			setTimeout(function() {
				if(typeof(user_name_and_surname_reload__RAND__) == 'function') user_name_and_surname_reload__RAND__();
				if(typeof(service_item_type_reload__RAND__) == 'function') service_item_type_reload__RAND__();
				if(typeof(vehicle_registration_number_reload__RAND__) == 'function') vehicle_registration_number_reload__RAND__();
				if(typeof(closing_km_reload__RAND__) == 'function') closing_km_reload__RAND__();
				if(typeof(workshop_name_reload__RAND__) == 'function') workshop_name_reload__RAND__();
			}, 50); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function user_name_and_surname_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#user_name_and_surname-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_user_name_and_surname__RAND__.value, t: 'schedule', f: 'user_name_and_surname' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="user_name_and_surname"]').val(resp.results[0].id);
							$j('[id=user_name_and_surname-container-readonly__RAND__]').html('<span class="match-text" id="user_name_and_surname-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }


							if(typeof(user_name_and_surname_update_autofills__RAND__) == 'function') user_name_and_surname_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'schedule', f: 'user_name_and_surname' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_user_name_and_surname__RAND__.value = e.added.id;
				AppGini.current_user_name_and_surname__RAND__.text = e.added.text;
				$j('[name="user_name_and_surname"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }


				if(typeof(user_name_and_surname_update_autofills__RAND__) == 'function') user_name_and_surname_update_autofills__RAND__();
			});

			if(!$j("#user_name_and_surname-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_user_name_and_surname__RAND__.value, t: 'schedule', f: 'user_name_and_surname' },
					success: function(resp) {
						$j('[name="user_name_and_surname"]').val(resp.results[0].id);
						$j('[id=user_name_and_surname-container-readonly__RAND__]').html('<span class="match-text" id="user_name_and_surname-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

						if(typeof(user_name_and_surname_update_autofills__RAND__) == 'function') user_name_and_surname_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_user_name_and_surname__RAND__.value, t: 'schedule', f: 'user_name_and_surname' },
				success: function(resp) {
					$j('[id=user_name_and_surname-container__RAND__], [id=user_name_and_surname-container-readonly__RAND__]').html('<span class="match-text" id="user_name_and_surname-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

					if(typeof(user_name_and_surname_update_autofills__RAND__) == 'function') user_name_and_surname_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function service_item_type_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#service_item_type-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_service_item_type__RAND__.value, t: 'schedule', f: 'service_item_type' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="service_item_type"]').val(resp.results[0].id);
							$j('[id=service_item_type-container-readonly__RAND__]').html('<span class="match-text" id="service_item_type-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=service_item_type_view_parent]').hide(); } else { $j('.btn[id=service_item_type_view_parent]').show(); }


							if(typeof(service_item_type_update_autofills__RAND__) == 'function') service_item_type_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'schedule', f: 'service_item_type' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_service_item_type__RAND__.value = e.added.id;
				AppGini.current_service_item_type__RAND__.text = e.added.text;
				$j('[name="service_item_type"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=service_item_type_view_parent]').hide(); } else { $j('.btn[id=service_item_type_view_parent]').show(); }


				if(typeof(service_item_type_update_autofills__RAND__) == 'function') service_item_type_update_autofills__RAND__();
			});

			if(!$j("#service_item_type-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_service_item_type__RAND__.value, t: 'schedule', f: 'service_item_type' },
					success: function(resp) {
						$j('[name="service_item_type"]').val(resp.results[0].id);
						$j('[id=service_item_type-container-readonly__RAND__]').html('<span class="match-text" id="service_item_type-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=service_item_type_view_parent]').hide(); } else { $j('.btn[id=service_item_type_view_parent]').show(); }

						if(typeof(service_item_type_update_autofills__RAND__) == 'function') service_item_type_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_service_item_type__RAND__.value, t: 'schedule', f: 'service_item_type' },
				success: function(resp) {
					$j('[id=service_item_type-container__RAND__], [id=service_item_type-container-readonly__RAND__]').html('<span class="match-text" id="service_item_type-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=service_item_type_view_parent]').hide(); } else { $j('.btn[id=service_item_type_view_parent]').show(); }

					if(typeof(service_item_type_update_autofills__RAND__) == 'function') service_item_type_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function vehicle_registration_number_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#vehicle_registration_number-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_vehicle_registration_number__RAND__.value, t: 'schedule', f: 'vehicle_registration_number' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="vehicle_registration_number"]').val(resp.results[0].id);
							$j('[id=vehicle_registration_number-container-readonly__RAND__]').html('<span class="match-text" id="vehicle_registration_number-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }


							if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'schedule', f: 'vehicle_registration_number' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_vehicle_registration_number__RAND__.value = e.added.id;
				AppGini.current_vehicle_registration_number__RAND__.text = e.added.text;
				$j('[name="vehicle_registration_number"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }


				if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
			});

			if(!$j("#vehicle_registration_number-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_vehicle_registration_number__RAND__.value, t: 'schedule', f: 'vehicle_registration_number' },
					success: function(resp) {
						$j('[name="vehicle_registration_number"]').val(resp.results[0].id);
						$j('[id=vehicle_registration_number-container-readonly__RAND__]').html('<span class="match-text" id="vehicle_registration_number-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

						if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_vehicle_registration_number__RAND__.value, t: 'schedule', f: 'vehicle_registration_number' },
				success: function(resp) {
					$j('[id=vehicle_registration_number-container__RAND__], [id=vehicle_registration_number-container-readonly__RAND__]').html('<span class="match-text" id="vehicle_registration_number-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

					if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function closing_km_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#closing_km-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_closing_km__RAND__.value, t: 'schedule', f: 'closing_km' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="closing_km"]').val(resp.results[0].id);
							$j('[id=closing_km-container-readonly__RAND__]').html('<span class="match-text" id="closing_km-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }


							if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'schedule', f: 'closing_km' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_closing_km__RAND__.value = e.added.id;
				AppGini.current_closing_km__RAND__.text = e.added.text;
				$j('[name="closing_km"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }


				if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
			});

			if(!$j("#closing_km-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_closing_km__RAND__.value, t: 'schedule', f: 'closing_km' },
					success: function(resp) {
						$j('[name="closing_km"]').val(resp.results[0].id);
						$j('[id=closing_km-container-readonly__RAND__]').html('<span class="match-text" id="closing_km-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }

						if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_closing_km__RAND__.value, t: 'schedule', f: 'closing_km' },
				success: function(resp) {
					$j('[id=closing_km-container__RAND__], [id=closing_km-container-readonly__RAND__]').html('<span class="match-text" id="closing_km-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }

					if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function workshop_name_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#workshop_name-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_workshop_name__RAND__.value, t: 'schedule', f: 'workshop_name' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="workshop_name"]').val(resp.results[0].id);
							$j('[id=workshop_name-container-readonly__RAND__]').html('<span class="match-text" id="workshop_name-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=districts_view_parent]').hide(); } else { $j('.btn[id=districts_view_parent]').show(); }


							if(typeof(workshop_name_update_autofills__RAND__) == 'function') workshop_name_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'schedule', f: 'workshop_name' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_workshop_name__RAND__.value = e.added.id;
				AppGini.current_workshop_name__RAND__.text = e.added.text;
				$j('[name="workshop_name"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=districts_view_parent]').hide(); } else { $j('.btn[id=districts_view_parent]').show(); }


				if(typeof(workshop_name_update_autofills__RAND__) == 'function') workshop_name_update_autofills__RAND__();
			});

			if(!$j("#workshop_name-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_workshop_name__RAND__.value, t: 'schedule', f: 'workshop_name' },
					success: function(resp) {
						$j('[name="workshop_name"]').val(resp.results[0].id);
						$j('[id=workshop_name-container-readonly__RAND__]').html('<span class="match-text" id="workshop_name-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=districts_view_parent]').hide(); } else { $j('.btn[id=districts_view_parent]').show(); }

						if(typeof(workshop_name_update_autofills__RAND__) == 'function') workshop_name_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_workshop_name__RAND__.value, t: 'schedule', f: 'workshop_name' },
				success: function(resp) {
					$j('[id=workshop_name-container__RAND__], [id=workshop_name-container-readonly__RAND__]').html('<span class="match-text" id="workshop_name-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=districts_view_parent]').hide(); } else { $j('.btn[id=districts_view_parent]').show(); }

					if(typeof(workshop_name_update_autofills__RAND__) == 'function') workshop_name_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_clean());


	// code for template based detail view forms

	// open the detail view template
	if($dvprint) {
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/schedule_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	} else {
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/schedule_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Schedule Details:', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', (Request::val('Embedded') ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($arrPerm['insert'] && !$selected_id) { // allow insert and no record selected?
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return schedule_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return schedule_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if(Request::val('Embedded')) {
		$backAction = 'AppGini.closeParentModal(); return false;';
	} else {
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id) {
		if(!Request::val('Embedded')) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate) {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return schedule_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm['delete'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['delete'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['delete'] == 3) { // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);

		// if not in embedded mode and user has insert only but no view/update/delete,
		// remove 'back' button
		if(
			$arrPerm['insert']
			&& !$arrPerm['update'] && !$arrPerm['delete'] && !$arrPerm['view']
			&& !Request::val('Embedded')
		)
			$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '', $templateCode);
		elseif($separateDV)
			$templateCode = str_replace(
				'<%%DESELECT_BUTTON%%>', 
				'<button
					type="submit" 
					class="btn btn-default" 
					id="deselect" 
					name="deselect_x" 
					value="1" 
					onclick="' . $backAction . '" 
					title="' . html_attr($Translation['Back']) . '">
						<i class="glyphicon glyphicon-chevron-left"></i> ' .
						$Translation['Back'] .
				'</button>',
				$templateCode
			);
		else
			$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '', $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate) || (!$selected_id && !$AllowInsert)) {
		$jsReadOnly = '';
		$jsReadOnly .= "\tjQuery('#title').replaceWith('<div class=\"form-control-static\" id=\"title\">' + (jQuery('#title').val() || '') + '</div>'); jQuery('#title-multi-selection-help').hide();\n";
		$jsReadOnly .= "\tjQuery('#user_name_and_surname').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#user_name_and_surname_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#user_contact_email, #user_contact_email-edit-link').hide();\n";
		$jsReadOnly .= "\tjQuery('#service_item_type').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#service_item_type_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('input[name=application_status]').parent().html('<div class=\"form-control-static\">' + jQuery('input[name=application_status]:checked').next().text() + '</div>')\n";
		$jsReadOnly .= "\tjQuery('#vehicle_registration_number').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#vehicle_registration_number_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#closing_km').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#closing_km_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#date').prop('readonly', true);\n";
		$jsReadOnly .= "\tjQuery('#dateDay, #dateMonth, #dateYear').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#time').replaceWith('<div class=\"form-control-static\" id=\"time\">' + (jQuery('#time').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#workshop_name').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#workshop_name_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#diagnosis').replaceWith('<div class=\"form-control-static\" id=\"diagnosis\">' + (jQuery('#diagnosis').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#prescription').replaceWith('<div class=\"form-control-static\" id=\"prescription\">' + (jQuery('#prescription').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	} elseif(($AllowInsert && !$selected_id) || ($AllowUpdate && $selected_id)) {
		$jsEditable = "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
		$jsEditable .= "\tjQuery('#time').addClass('always_shown').timepicker({ defaultTime: false, showSeconds: true, showMeridian: false, showInputs: false, disableFocus: true, minuteStep: 5 });";
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(title)%%>', $combo_title->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(title)%%>', $combo_title->SelectedData, $templateCode);
	$templateCode = str_replace('<%%COMBO(user_name_and_surname)%%>', $combo_user_name_and_surname->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(user_name_and_surname)%%>', $combo_user_name_and_surname->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(user_name_and_surname)%%>', urlencode($combo_user_name_and_surname->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(service_item_type)%%>', $combo_service_item_type->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(service_item_type)%%>', $combo_service_item_type->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(service_item_type)%%>', urlencode($combo_service_item_type->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(application_status)%%>', $combo_application_status->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(application_status)%%>', $combo_application_status->SelectedData, $templateCode);
	$templateCode = str_replace('<%%COMBO(vehicle_registration_number)%%>', $combo_vehicle_registration_number->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(vehicle_registration_number)%%>', $combo_vehicle_registration_number->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(vehicle_registration_number)%%>', urlencode($combo_vehicle_registration_number->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(closing_km)%%>', $combo_closing_km->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(closing_km)%%>', $combo_closing_km->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(closing_km)%%>', urlencode($combo_closing_km->MatchText), $templateCode);
	$templateCode = str_replace(
		'<%%COMBO(date)%%>', 
		($selected_id && !$arrPerm['edit'] && ($noSaveAsCopy || !$arrPerm['insert']) ? 
			'<div class="form-control-static">' . $combo_date->GetHTML(true) . '</div>' : 
			$combo_date->GetHTML()
		), $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(date)%%>', $combo_date->GetHTML(true), $templateCode);
	$templateCode = str_replace('<%%COMBO(workshop_name)%%>', $combo_workshop_name->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(workshop_name)%%>', $combo_workshop_name->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(workshop_name)%%>', urlencode($combo_workshop_name->MatchText), $templateCode);

	/* lookup fields array: 'lookup field name' => ['parent table name', 'lookup field caption'] */
	$lookup_fields = ['user_name_and_surname' => ['gmt_fleet_register', 'Owner of Vehicle Name & Surname:'], 'service_item_type' => ['service_item_type', 'Service Item Type:'], 'vehicle_registration_number' => ['gmt_fleet_register', 'Vehicle Registration Number:'], 'closing_km' => ['log_sheet', 'Odometer Reading (km):'], 'workshop_name' => ['districts', 'Workshop Name:'], ];
	foreach($lookup_fields as $luf => $ptfc) {
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']) {
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] /* && !Request::val('Embedded')*/) {
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-default add_new_parent" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus text-success"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(schedule_id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(title)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(user_name_and_surname)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(service_item_type)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(application_status)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(vehicle_registration_number)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(closing_km)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(date)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(time)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(workshop_name)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(diagnosis)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(prescription)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(comments)%%>', '', $templateCode);

	// process values
	if($selected_id) {
		if( $dvprint) $templateCode = str_replace('<%%VALUE(schedule_id)%%>', safe_html($urow['schedule_id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(schedule_id)%%>', html_attr($row['schedule_id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(schedule_id)%%>', urlencode($urow['schedule_id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(title)%%>', safe_html($urow['title']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(title)%%>', html_attr($row['title']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(title)%%>', urlencode($urow['title']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(user_name_and_surname)%%>', safe_html($urow['user_name_and_surname']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(user_name_and_surname)%%>', html_attr($row['user_name_and_surname']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(user_name_and_surname)%%>', urlencode($urow['user_name_and_surname']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(service_item_type)%%>', safe_html($urow['service_item_type']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(service_item_type)%%>', html_attr($row['service_item_type']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(service_item_type)%%>', urlencode($urow['service_item_type']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(application_status)%%>', safe_html($urow['application_status']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(application_status)%%>', html_attr($row['application_status']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(application_status)%%>', urlencode($urow['application_status']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(vehicle_registration_number)%%>', safe_html($urow['vehicle_registration_number']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(vehicle_registration_number)%%>', html_attr($row['vehicle_registration_number']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(vehicle_registration_number)%%>', urlencode($urow['vehicle_registration_number']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(closing_km)%%>', safe_html($urow['closing_km']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(closing_km)%%>', html_attr($row['closing_km']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(closing_km)%%>', urlencode($urow['closing_km']), $templateCode);
		$templateCode = str_replace('<%%VALUE(date)%%>', app_datetime($row['date']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(date)%%>', urlencode(app_datetime($urow['date'])), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(time)%%>', safe_html($urow['time']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(time)%%>', html_attr($row['time']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(time)%%>', urlencode($urow['time']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(workshop_name)%%>', safe_html($urow['workshop_name']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(workshop_name)%%>', html_attr($row['workshop_name']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(workshop_name)%%>', urlencode($urow['workshop_name']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(diagnosis)%%>', safe_html($urow['diagnosis']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(diagnosis)%%>', html_attr($row['diagnosis']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(diagnosis)%%>', urlencode($urow['diagnosis']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(prescription)%%>', safe_html($urow['prescription']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(prescription)%%>', html_attr($row['prescription']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(prescription)%%>', urlencode($urow['prescription']), $templateCode);
		if($AllowUpdate || $AllowInsert) {
			$templateCode = str_replace('<%%HTMLAREA(comments)%%>', '<textarea name="comments" id="comments" rows="5">' . safe_html(htmlspecialchars_decode($row['comments'])) . '</textarea>', $templateCode);
		} else {
			$templateCode = str_replace('<%%HTMLAREA(comments)%%>', '<div id="comments" class="form-control-static">' . $row['comments'] . '</div>', $templateCode);
		}
		$templateCode = str_replace('<%%VALUE(comments)%%>', nl2br($row['comments']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(comments)%%>', urlencode($urow['comments']), $templateCode);
	} else {
		$templateCode = str_replace('<%%VALUE(schedule_id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(schedule_id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(title)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(title)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(user_name_and_surname)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(user_name_and_surname)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(service_item_type)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(service_item_type)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(application_status)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(application_status)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(vehicle_registration_number)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(vehicle_registration_number)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(closing_km)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(closing_km)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(date)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(date)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(time)%%>', '12:00:00', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(time)%%>', urlencode('12:00:00'), $templateCode);
		$templateCode = str_replace('<%%VALUE(workshop_name)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(workshop_name)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(diagnosis)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(diagnosis)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(prescription)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(prescription)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%HTMLAREA(comments)%%>', '<textarea name="comments" id="comments" rows="5"></textarea>', $templateCode);
	}

	// process translations
	$templateCode = parseTemplate($templateCode);

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if(Request::val('dvprint_x') == '') {
		$templateCode .= "\n\n<script>\$j(function() {\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption) {
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id) {
			$templateCode.="\n\tif(document.getElementById('user_contact_emailEdit')) { document.getElementById('user_contact_emailEdit').style.display='inline'; }";
			$templateCode.="\n\tif(document.getElementById('user_contact_emailEditLink')) { document.getElementById('user_contact_emailEditLink').style.display='none'; }";
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';

	$templateCode .= "\tuser_name_and_surname_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'schedule_autofill.php?rnd1=$rnd1&mfk=user_name_and_surname&id=' + encodeURIComponent('".addslashes($row['user_name_and_surname'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'schedule_autofill.php?rnd1=$rnd1&mfk=user_name_and_surname&id=' + encodeURIComponent(AppGini.current_user_name_and_surname{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#user_name_and_surname$rnd1').prop('disabled', true); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm['insert'] || (($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3)) ? "\$j('#user_name_and_surname$rnd1').prop('disabled', false); " : "\$j('#user_name_and_surname$rnd1').prop('disabled', true); ")." \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#user_name_and_surname_caption').length) \$j('#user_name_and_surname_caption').click(function() { user_name_and_surname_update_autofills$rnd1(); });\n";

	$templateCode .= "\tservice_item_type_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'schedule_autofill.php?rnd1=$rnd1&mfk=service_item_type&id=' + encodeURIComponent('".addslashes($row['service_item_type'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'schedule_autofill.php?rnd1=$rnd1&mfk=service_item_type&id=' + encodeURIComponent(AppGini.current_service_item_type{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#service_item_type$rnd1').prop('disabled', true); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm['insert'] || (($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3)) ? "\$j('#service_item_type$rnd1').prop('disabled', false); " : "\$j('#service_item_type$rnd1').prop('disabled', true); ")." \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#service_item_type_caption').length) \$j('#service_item_type_caption').click(function() { service_item_type_update_autofills$rnd1(); });\n";


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields
	$filterField = Request::val('FilterField');
	$filterOperator = Request::val('FilterOperator');
	$filterValue = Request::val('FilterValue');

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('schedule');
	if($selected_id) {
		$jdata = get_joined_record('schedule', $selected_id);
		if($jdata === false) $jdata = get_defaults('schedule');
		$rdata = $row;
	}
	$templateCode .= loadView('schedule-ajax-cache', ['rdata' => $rdata, 'jdata' => $jdata]);

	// hook: schedule_dv
	if(function_exists('schedule_dv')) {
		$args = [];
		schedule_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}