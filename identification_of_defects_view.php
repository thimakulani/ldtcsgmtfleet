<?php
// This script and data application were generated by AppGini 22.13
// Download AppGini for free from https://bigprof.com/appgini/download/

	include_once(__DIR__ . '/lib.php');
	@include_once(__DIR__ . '/hooks/identification_of_defects.php');
	include_once(__DIR__ . '/identification_of_defects_dml.php');

	// mm: can the current member access this page?
	$perm = getTablePermissions('identification_of_defects');
	if(!$perm['access']) {
		echo error_message($Translation['tableAccessDenied']);
		exit;
	}

	$x = new DataList;
	$x->TableName = 'identification_of_defects';

	// Fields that can be displayed in the table view
	$x->QueryFieldsTV = [
		"`identification_of_defects`.`defects_id`" => "defects_id",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`vehicle_registration_number`), CONCAT_WS('',   `gmt_fleet_register1`.`vehicle_registration_number`), '') /* Registration Number: */" => "vehicle_registration_number",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`engine_number`), CONCAT_WS('',   `gmt_fleet_register1`.`engine_number`), '') /* Engine Number: */" => "engine_number",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`model_of_vehicle`) || CHAR_LENGTH(`dealer1`.`make_of_vehicle`), CONCAT_WS('',   `gmt_fleet_register1`.`model_of_vehicle`, '   |    and     |     ', `dealer1`.`make_of_vehicle`, '   '), '') /* Make of Vehicle: */" => "make_of_vehicle",
		"`identification_of_defects`.`end_user_name_and_surname`" => "end_user_name_and_surname",
		"`identification_of_defects`.`end_user_contact_details`" => "end_user_contact_details",
		"`identification_of_defects`.`end_user_persal_number`" => "end_user_persal_number",
		"`identification_of_defects`.`end_user_email_address`" => "end_user_email_address",
		"`identification_of_defects`.`end_user_signature`" => "end_user_signature",
		"`identification_of_defects`.`types_of_defects`" => "types_of_defects",
		"`identification_of_defects`.`courses_of_defects`" => "courses_of_defects",
		"`identification_of_defects`.`condition_of_defects`" => "condition_of_defects",
		"`identification_of_defects`.`transport_officer_name_and_surname`" => "transport_officer_name_and_surname",
		"`identification_of_defects`.`transport_officer_persal_number`" => "transport_officer_persal_number",
		"`identification_of_defects`.`transport_officer_contact_details`" => "transport_officer_contact_details",
		"`identification_of_defects`.`transport_officer_email_address`" => "transport_officer_email_address",
		"`identification_of_defects`.`government_garage_manager_name_and_surname`" => "government_garage_manager_name_and_surname",
		"`identification_of_defects`.`government_garage_manager_contact_details`" => "government_garage_manager_contact_details",
		"`identification_of_defects`.`government_garage_manager_address`" => "government_garage_manager_address",
		"`identification_of_defects`.`government_garage_manager_email_address`" => "government_garage_manager_email_address",
		"`identification_of_defects`.`government_garage_manager_signature`" => "government_garage_manager_signature",
	];
	// mapping incoming sort by requests to actual query fields
	$x->SortFields = [
		1 => '`identification_of_defects`.`defects_id`',
		2 => '`gmt_fleet_register1`.`vehicle_registration_number`',
		3 => '`gmt_fleet_register1`.`engine_number`',
		4 => 4,
		5 => 5,
		6 => 6,
		7 => 7,
		8 => 8,
		9 => 9,
		10 => 10,
		11 => 11,
		12 => 12,
		13 => 13,
		14 => 14,
		15 => 15,
		16 => 16,
		17 => 17,
		18 => 18,
		19 => 19,
		20 => 20,
		21 => 21,
	];

	// Fields that can be displayed in the csv file
	$x->QueryFieldsCSV = [
		"`identification_of_defects`.`defects_id`" => "defects_id",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`vehicle_registration_number`), CONCAT_WS('',   `gmt_fleet_register1`.`vehicle_registration_number`), '') /* Registration Number: */" => "vehicle_registration_number",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`engine_number`), CONCAT_WS('',   `gmt_fleet_register1`.`engine_number`), '') /* Engine Number: */" => "engine_number",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`model_of_vehicle`) || CHAR_LENGTH(`dealer1`.`make_of_vehicle`), CONCAT_WS('',   `gmt_fleet_register1`.`model_of_vehicle`, '   |    and     |     ', `dealer1`.`make_of_vehicle`, '   '), '') /* Make of Vehicle: */" => "make_of_vehicle",
		"`identification_of_defects`.`end_user_name_and_surname`" => "end_user_name_and_surname",
		"`identification_of_defects`.`end_user_contact_details`" => "end_user_contact_details",
		"`identification_of_defects`.`end_user_persal_number`" => "end_user_persal_number",
		"`identification_of_defects`.`end_user_email_address`" => "end_user_email_address",
		"`identification_of_defects`.`end_user_signature`" => "end_user_signature",
		"`identification_of_defects`.`types_of_defects`" => "types_of_defects",
		"`identification_of_defects`.`courses_of_defects`" => "courses_of_defects",
		"`identification_of_defects`.`condition_of_defects`" => "condition_of_defects",
		"`identification_of_defects`.`transport_officer_name_and_surname`" => "transport_officer_name_and_surname",
		"`identification_of_defects`.`transport_officer_persal_number`" => "transport_officer_persal_number",
		"`identification_of_defects`.`transport_officer_contact_details`" => "transport_officer_contact_details",
		"`identification_of_defects`.`transport_officer_email_address`" => "transport_officer_email_address",
		"`identification_of_defects`.`government_garage_manager_name_and_surname`" => "government_garage_manager_name_and_surname",
		"`identification_of_defects`.`government_garage_manager_contact_details`" => "government_garage_manager_contact_details",
		"`identification_of_defects`.`government_garage_manager_address`" => "government_garage_manager_address",
		"`identification_of_defects`.`government_garage_manager_email_address`" => "government_garage_manager_email_address",
		"`identification_of_defects`.`government_garage_manager_signature`" => "government_garage_manager_signature",
	];
	// Fields that can be filtered
	$x->QueryFieldsFilters = [
		"`identification_of_defects`.`defects_id`" => "Defects ID:",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`vehicle_registration_number`), CONCAT_WS('',   `gmt_fleet_register1`.`vehicle_registration_number`), '') /* Registration Number: */" => "Registration Number:",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`engine_number`), CONCAT_WS('',   `gmt_fleet_register1`.`engine_number`), '') /* Engine Number: */" => "Engine Number:",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`model_of_vehicle`) || CHAR_LENGTH(`dealer1`.`make_of_vehicle`), CONCAT_WS('',   `gmt_fleet_register1`.`model_of_vehicle`, '   |    and     |     ', `dealer1`.`make_of_vehicle`, '   '), '') /* Make of Vehicle: */" => "Make of Vehicle:",
		"`identification_of_defects`.`end_user_name_and_surname`" => "End User Name & Surname:",
		"`identification_of_defects`.`end_user_contact_details`" => "End User Contact Details:",
		"`identification_of_defects`.`end_user_persal_number`" => "End User Persal Number:",
		"`identification_of_defects`.`end_user_email_address`" => "End User Email Address:",
		"`identification_of_defects`.`types_of_defects`" => "Types Of Defects:",
		"`identification_of_defects`.`courses_of_defects`" => "Courses Of Defects:",
		"`identification_of_defects`.`condition_of_defects`" => "Condition Of Defects:",
		"`identification_of_defects`.`transport_officer_name_and_surname`" => "Transport Officer Name & Surname:",
		"`identification_of_defects`.`transport_officer_persal_number`" => "Transport Officer Persal Number:",
		"`identification_of_defects`.`transport_officer_contact_details`" => "Transport Officer Contact Details:",
		"`identification_of_defects`.`government_garage_manager_name_and_surname`" => "Garage Manager Name & Surname:",
		"`identification_of_defects`.`government_garage_manager_contact_details`" => "Government Garage Manager Contact Details:",
		"`identification_of_defects`.`government_garage_manager_address`" => "Government Garage Manager Address:",
		"`identification_of_defects`.`government_garage_manager_email_address`" => "Government Garage Manager Email Address:",
	];

	// Fields that can be quick searched
	$x->QueryFieldsQS = [
		"`identification_of_defects`.`defects_id`" => "defects_id",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`vehicle_registration_number`), CONCAT_WS('',   `gmt_fleet_register1`.`vehicle_registration_number`), '') /* Registration Number: */" => "vehicle_registration_number",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`engine_number`), CONCAT_WS('',   `gmt_fleet_register1`.`engine_number`), '') /* Engine Number: */" => "engine_number",
		"IF(    CHAR_LENGTH(`gmt_fleet_register1`.`model_of_vehicle`) || CHAR_LENGTH(`dealer1`.`make_of_vehicle`), CONCAT_WS('',   `gmt_fleet_register1`.`model_of_vehicle`, '   |    and     |     ', `dealer1`.`make_of_vehicle`, '   '), '') /* Make of Vehicle: */" => "make_of_vehicle",
		"`identification_of_defects`.`end_user_name_and_surname`" => "end_user_name_and_surname",
		"`identification_of_defects`.`end_user_contact_details`" => "end_user_contact_details",
		"`identification_of_defects`.`end_user_persal_number`" => "end_user_persal_number",
		"`identification_of_defects`.`end_user_email_address`" => "end_user_email_address",
		"`identification_of_defects`.`types_of_defects`" => "types_of_defects",
		"`identification_of_defects`.`courses_of_defects`" => "courses_of_defects",
		"`identification_of_defects`.`condition_of_defects`" => "condition_of_defects",
		"`identification_of_defects`.`transport_officer_name_and_surname`" => "transport_officer_name_and_surname",
		"`identification_of_defects`.`transport_officer_persal_number`" => "transport_officer_persal_number",
		"`identification_of_defects`.`transport_officer_contact_details`" => "transport_officer_contact_details",
		"`identification_of_defects`.`government_garage_manager_name_and_surname`" => "government_garage_manager_name_and_surname",
		"`identification_of_defects`.`government_garage_manager_contact_details`" => "government_garage_manager_contact_details",
		"`identification_of_defects`.`government_garage_manager_address`" => "government_garage_manager_address",
		"`identification_of_defects`.`government_garage_manager_email_address`" => "government_garage_manager_email_address",
	];

	// Lookup fields that can be used as filterers
	$x->filterers = ['vehicle_registration_number' => 'Registration Number:', ];

	$x->QueryFrom = "`identification_of_defects` LEFT JOIN `gmt_fleet_register` as gmt_fleet_register1 ON `gmt_fleet_register1`.`fleet_asset_id`=`identification_of_defects`.`vehicle_registration_number` LEFT JOIN `dealer` as dealer1 ON `dealer1`.`dealer_id`=`gmt_fleet_register1`.`make_of_vehicle` ";
	$x->QueryWhere = '';
	$x->QueryOrder = '';

	$x->AllowSelection = 1;
	$x->HideTableView = ($perm['view'] == 0 ? 1 : 0);
	$x->AllowDelete = $perm['delete'];
	$x->AllowMassDelete = (getLoggedAdmin() !== false);
	$x->AllowInsert = $perm['insert'];
	$x->AllowUpdate = $perm['edit'];
	$x->SeparateDV = 1;
	$x->AllowDeleteOfParents = 0;
	$x->AllowFilters = 1;
	$x->AllowSavingFilters = (getLoggedAdmin() !== false);
	$x->AllowSorting = 1;
	$x->AllowNavigation = 1;
	$x->AllowPrinting = 1;
	$x->AllowPrintingDV = 1;
	$x->AllowCSV = 1;
	$x->RecordsPerPage = 25;
	$x->QuickSearch = 1;
	$x->QuickSearchText = $Translation['quick search'];
	$x->ScriptFileName = 'identification_of_defects_view.php';
	$x->RedirectAfterInsert = 'identification_of_defects_view.php?SelectedID=#ID#';
	$x->TableTitle = 'Identification Of Defects:';
	$x->TableIcon = 'resources/table_icons/corrugated_fastening_tool_128.png';
	$x->PrimaryKey = '`identification_of_defects`.`defects_id`';

	$x->ColWidth = [150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, ];
	$x->ColCaption = ['Defects ID:', 'Registration Number:', 'Engine Number:', 'Make of Vehicle:', 'End User Name & Surname:', 'End User Contact Details:', 'End User Persal Number:', 'End User Email Address:', 'End User Signature:', 'Types Of Defects:', 'Courses Of Defects:', 'Condition Of Defects:', 'Transport Officer Name & Surname:', 'Transport Officer Persal Number:', 'Transport Officer Contact Details:', 'Transport Officer Email Address:', 'Garage Manager Name & Surname:', 'Government Garage Manager Contact Details:', 'Government Garage Manager Address:', 'Government Garage Manager Email Address:', 'Government Garage Manager Signature:', ];
	$x->ColFieldName = ['defects_id', 'vehicle_registration_number', 'engine_number', 'make_of_vehicle', 'end_user_name_and_surname', 'end_user_contact_details', 'end_user_persal_number', 'end_user_email_address', 'end_user_signature', 'types_of_defects', 'courses_of_defects', 'condition_of_defects', 'transport_officer_name_and_surname', 'transport_officer_persal_number', 'transport_officer_contact_details', 'transport_officer_email_address', 'government_garage_manager_name_and_surname', 'government_garage_manager_contact_details', 'government_garage_manager_address', 'government_garage_manager_email_address', 'government_garage_manager_signature', ];
	$x->ColNumber  = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ];

	// template paths below are based on the app main directory
	$x->Template = 'templates/identification_of_defects_templateTV.html';
	$x->SelectedTemplate = 'templates/identification_of_defects_templateTVS.html';
	$x->TemplateDV = 'templates/identification_of_defects_templateDV.html';
	$x->TemplateDVP = 'templates/identification_of_defects_templateDVP.html';

	$x->ShowTableHeader = 1;
	$x->TVClasses = "";
	$x->DVClasses = "";
	$x->HasCalculatedFields = false;
	$x->AllowConsoleLog = false;
	$x->AllowDVNavigation = true;

	// hook: identification_of_defects_init
	$render = true;
	if(function_exists('identification_of_defects_init')) {
		$args = [];
		$render = identification_of_defects_init($x, getMemberInfo(), $args);
	}

	if($render) $x->Render();

	// hook: identification_of_defects_header
	$headerCode = '';
	if(function_exists('identification_of_defects_header')) {
		$args = [];
		$headerCode = identification_of_defects_header($x->ContentType, getMemberInfo(), $args);
	}

	if(!$headerCode) {
		include_once(__DIR__ . '/header.php'); 
	} else {
		ob_start();
		include_once(__DIR__ . '/header.php');
		echo str_replace('<%%HEADER%%>', ob_get_clean(), $headerCode);
	}

	echo $x->HTML;

	// hook: identification_of_defects_footer
	$footerCode = '';
	if(function_exists('identification_of_defects_footer')) {
		$args = [];
		$footerCode = identification_of_defects_footer($x->ContentType, getMemberInfo(), $args);
	}

	if(!$footerCode) {
		include_once(__DIR__ . '/footer.php'); 
	} else {
		ob_start();
		include_once(__DIR__ . '/footer.php');
		echo str_replace('<%%FOOTER%%>', ob_get_clean(), $footerCode);
	}
