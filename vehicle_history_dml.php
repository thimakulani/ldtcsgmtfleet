<?php

// Data functions (insert, update, delete, form) for table vehicle_history

// This script and data application were generated by AppGini 22.13
// Download AppGini for free from https://bigprof.com/appgini/download/

function vehicle_history_insert(&$error_message = '') {
	global $Translation;

	// mm: can member insert record?
	$arrPerm = getTablePermissions('vehicle_history');
	if(!$arrPerm['insert']) return false;

	$data = [
		'vehicle_registration_number' => Request::lookup('vehicle_registration_number', ''),
		'engine_number' => Request::lookup('vehicle_registration_number'),
		'purchased_price' => Request::lookup('vehicle_registration_number'),
		'old_registration_number' => Request::lookup('vehicle_registration_number'),
		'new_vehicle_registration_number' => Request::val('new_vehicle_registration_number', ''),
		'date_of_vehicle_transfer' => Request::dateComponents('date_of_vehicle_transfer', ''),
		'comments' => Request::val('comments', ''),
		'renewal_of_license' => Request::lookup('vehicle_registration_number'),
		'date_of_service' => Request::lookup('date_of_service', ''),
		'date_of_next_service' => Request::lookup('date_of_service'),
		'purchased_order_number' => Request::lookup('purchased_order_number', ''),
		'claim_code' => Request::lookup('claim_code', ''),
		'tyre_inspection_report' => Request::lookup('tyre_inspection_report', ''),
		'inspection_certification_number' => Request::lookup('inspection_certification_number', ''),
		'document_checklist_report' => Request::lookup('document_checklist_report', ''),
		'next_inspection_date' => Request::lookup('next_inspection_date', '1'),
		'breakdown_of_vehicle' => Request::val('breakdown_of_vehicle', ''),
		'date_of_vehicle_breakdown' => Request::dateComponents('date_of_vehicle_breakdown', ''),
		'description_of_vehicle_breakdown' => Request::val('description_of_vehicle_breakdown', ''),
		'closing_km' => Request::lookup('closing_km', ''),
		'date_of_vehicle_reactivation' => mysql_datetime(Request::val('date_of_vehicle_reactivation', '')),
		'total_cost' => Request::lookup('total_cost', '0.00'),
	];


	// hook: vehicle_history_before_insert
	if(function_exists('vehicle_history_before_insert')) {
		$args = [];
		if(!vehicle_history_before_insert($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$error = '';
	// set empty fields to NULL
	$data = array_map(function($v) { return ($v === '' ? NULL : $v); }, $data);
	insert('vehicle_history', backtick_keys_once($data), $error);
	if($error) {
		$error_message = $error;
		return false;
	}

	$recID = db_insert_id(db_link());

	update_calc_fields('vehicle_history', $recID, calculated_fields()['vehicle_history']);

	// hook: vehicle_history_after_insert
	if(function_exists('vehicle_history_after_insert')) {
		$res = sql("SELECT * FROM `vehicle_history` WHERE `history_id`='" . makeSafe($recID, false) . "' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) {
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args = [];
		if(!vehicle_history_after_insert($data, getMemberInfo(), $args)) { return $recID; }
	}

	// mm: save ownership data
	set_record_owner('vehicle_history', $recID, getLoggedMemberID());

	// if this record is a copy of another record, copy children if applicable
	if(strlen(Request::val('SelectedID'))) vehicle_history_copy_children($recID, Request::val('SelectedID'));

	return $recID;
}

function vehicle_history_copy_children($destination_id, $source_id) {
	global $Translation;
	$requests = []; // array of curl handlers for launching insert requests
	$eo = ['silentErrors' => true];
	$safe_sid = makeSafe($source_id);

	// launch requests, asynchronously
	curl_batch($requests);
}

function vehicle_history_delete($selected_id, $AllowDeleteOfParents = false, $skipChecks = false) {
	// insure referential integrity ...
	global $Translation;
	$selected_id = makeSafe($selected_id);

	// mm: can member delete record?
	if(!check_record_permission('vehicle_history', $selected_id, 'delete')) {
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: vehicle_history_before_delete
	if(function_exists('vehicle_history_before_delete')) {
		$args = [];
		if(!vehicle_history_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'] . (
				!empty($args['error_message']) ?
					'<div class="text-bold">' . strip_tags($args['error_message']) . '</div>'
					: '' 
			);
	}

	sql("DELETE FROM `vehicle_history` WHERE `history_id`='{$selected_id}'", $eo);

	// hook: vehicle_history_after_delete
	if(function_exists('vehicle_history_after_delete')) {
		$args = [];
		vehicle_history_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("DELETE FROM `membership_userrecords` WHERE `tableName`='vehicle_history' AND `pkValue`='{$selected_id}'", $eo);
}

function vehicle_history_update(&$selected_id, &$error_message = '') {
	global $Translation;

	// mm: can member edit record?
	if(!check_record_permission('vehicle_history', $selected_id, 'edit')) return false;

	$data = [
		'vehicle_registration_number' => Request::lookup('vehicle_registration_number', ''),
		'engine_number' => Request::lookup('vehicle_registration_number'),
		'purchased_price' => Request::lookup('vehicle_registration_number'),
		'old_registration_number' => Request::lookup('vehicle_registration_number'),
		'new_vehicle_registration_number' => Request::val('new_vehicle_registration_number', ''),
		'date_of_vehicle_transfer' => Request::dateComponents('date_of_vehicle_transfer', ''),
		'comments' => Request::val('comments', ''),
		'renewal_of_license' => Request::lookup('vehicle_registration_number'),
		'date_of_service' => Request::lookup('date_of_service', ''),
		'date_of_next_service' => Request::lookup('date_of_service'),
		'purchased_order_number' => Request::lookup('purchased_order_number', ''),
		'claim_code' => Request::lookup('claim_code', ''),
		'tyre_inspection_report' => Request::lookup('tyre_inspection_report', ''),
		'inspection_certification_number' => Request::lookup('inspection_certification_number', ''),
		'document_checklist_report' => Request::lookup('document_checklist_report', ''),
		'next_inspection_date' => Request::lookup('next_inspection_date', ''),
		'breakdown_of_vehicle' => Request::val('breakdown_of_vehicle', ''),
		'date_of_vehicle_breakdown' => Request::dateComponents('date_of_vehicle_breakdown', ''),
		'description_of_vehicle_breakdown' => Request::val('description_of_vehicle_breakdown', ''),
		'closing_km' => Request::lookup('closing_km', ''),
		'date_of_vehicle_reactivation' => mysql_datetime(Request::val('date_of_vehicle_reactivation', '')),
		'total_cost' => Request::lookup('total_cost', ''),
	];

	// get existing values
	$old_data = getRecord('vehicle_history', $selected_id);
	if(is_array($old_data)) {
		$old_data = array_map('makeSafe', $old_data);
		$old_data['selectedID'] = makeSafe($selected_id);
	}

	$data['selectedID'] = makeSafe($selected_id);

	// hook: vehicle_history_before_update
	if(function_exists('vehicle_history_before_update')) {
		$args = ['old_data' => $old_data];
		if(!vehicle_history_before_update($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$set = $data; unset($set['selectedID']);
	foreach ($set as $field => $value) {
		$set[$field] = ($value !== '' && $value !== NULL) ? $value : NULL;
	}

	if(!update(
		'vehicle_history', 
		backtick_keys_once($set), 
		['`history_id`' => $selected_id], 
		$error_message
	)) {
		echo $error_message;
		echo '<a href="vehicle_history_view.php?SelectedID=' . urlencode($selected_id) . "\">{$Translation['< back']}</a>";
		exit;
	}


	$eo = ['silentErrors' => true];

	update_calc_fields('vehicle_history', $data['selectedID'], calculated_fields()['vehicle_history']);

	// hook: vehicle_history_after_update
	if(function_exists('vehicle_history_after_update')) {
		$res = sql("SELECT * FROM `vehicle_history` WHERE `history_id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) $data = array_map('makeSafe', $row);

		$data['selectedID'] = $data['history_id'];
		$args = ['old_data' => $old_data];
		if(!vehicle_history_after_update($data, getMemberInfo(), $args)) return;
	}

	// mm: update ownership data
	sql("UPDATE `membership_userrecords` SET `dateUpdated`='" . time() . "' WHERE `tableName`='vehicle_history' AND `pkValue`='" . makeSafe($selected_id) . "'", $eo);
}

function vehicle_history_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $separateDV = 0, $TemplateDV = '', $TemplateDVP = '') {
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;
	$eo = ['silentErrors' => true];
	$noUploads = null;
	$row = $urow = $jsReadOnly = $jsEditable = $lookups = null;

	$noSaveAsCopy = true;

	// mm: get table permissions
	$arrPerm = getTablePermissions('vehicle_history');
	if(!$arrPerm['insert'] && $selected_id == '')
		// no insert permission and no record selected
		// so show access denied error unless TVDV
		return $separateDV ? $Translation['tableAccessDenied'] : '';
	$AllowInsert = ($arrPerm['insert'] ? true : false);
	// print preview?
	$dvprint = false;
	if(strlen($selected_id) && Request::val('dvprint_x') != '') {
		$dvprint = true;
	}

	$filterer_vehicle_registration_number = Request::val('filterer_vehicle_registration_number');
	$filterer_date_of_service = Request::val('filterer_date_of_service');
	$filterer_purchased_order_number = Request::val('filterer_purchased_order_number');
	$filterer_claim_code = Request::val('filterer_claim_code');
	$filterer_tyre_inspection_report = Request::val('filterer_tyre_inspection_report');
	$filterer_inspection_certification_number = Request::val('filterer_inspection_certification_number');
	$filterer_document_checklist_report = Request::val('filterer_document_checklist_report');
	$filterer_next_inspection_date = Request::val('filterer_next_inspection_date');
	$filterer_closing_km = Request::val('filterer_closing_km');
	$filterer_total_cost = Request::val('filterer_total_cost');

	// populate filterers, starting from children to grand-parents
	if($filterer_date_of_service && !$filterer_vehicle_registration_number) $filterer_vehicle_registration_number = sqlValue("select vehicle_registration_number from service where service_id='" . makeSafe($filterer_date_of_service) . "'");
	if($filterer_date_of_service && !$filterer_closing_km) $filterer_closing_km = sqlValue("select closing_km from service where service_id='" . makeSafe($filterer_date_of_service) . "'");
	if($filterer_purchased_order_number && !$filterer_vehicle_registration_number) $filterer_vehicle_registration_number = sqlValue("select vehicle_registration_number from purchase_orders where purchase_order_id='" . makeSafe($filterer_purchased_order_number) . "'");
	if($filterer_claim_code && !$filterer_vehicle_registration_number) $filterer_vehicle_registration_number = sqlValue("select vehicle_registration_number from claim where claim_id='" . makeSafe($filterer_claim_code) . "'");
	if($filterer_claim_code && !$filterer_closing_km) $filterer_closing_km = sqlValue("select closing_km from claim where claim_id='" . makeSafe($filterer_claim_code) . "'");
	if($filterer_tyre_inspection_report && !$filterer_vehicle_registration_number) $filterer_vehicle_registration_number = sqlValue("select vehicle_registration_number from tyre_log_sheet where tyre_log_id='" . makeSafe($filterer_tyre_inspection_report) . "'");
	if($filterer_inspection_certification_number && !$filterer_vehicle_registration_number) $filterer_vehicle_registration_number = sqlValue("select vehicle_registration_number from vehicle_daily_check_list where vehicle_daily_check_list_id='" . makeSafe($filterer_inspection_certification_number) . "'");
	if($filterer_inspection_certification_number && !$filterer_closing_km) $filterer_closing_km = sqlValue("select closing_km from vehicle_daily_check_list where vehicle_daily_check_list_id='" . makeSafe($filterer_inspection_certification_number) . "'");
	if($filterer_document_checklist_report && !$filterer_vehicle_registration_number) $filterer_vehicle_registration_number = sqlValue("select vehicle_registration_number from vehicle_daily_check_list where vehicle_daily_check_list_id='" . makeSafe($filterer_document_checklist_report) . "'");
	if($filterer_next_inspection_date && !$filterer_vehicle_registration_number) $filterer_vehicle_registration_number = sqlValue("select vehicle_registration_number from vehicle_daily_check_list where vehicle_daily_check_list_id='" . makeSafe($filterer_next_inspection_date) . "'");
	if($filterer_next_inspection_date && !$filterer_closing_km) $filterer_closing_km = sqlValue("select closing_km from vehicle_daily_check_list where vehicle_daily_check_list_id='" . makeSafe($filterer_next_inspection_date) . "'");
	if($filterer_closing_km && !$filterer_vehicle_registration_number) $filterer_vehicle_registration_number = sqlValue("select vehicle_registration_number from log_sheet where fuel_log_sheet_id='" . makeSafe($filterer_closing_km) . "'");
	if($filterer_total_cost && !$filterer_vehicle_registration_number) $filterer_vehicle_registration_number = sqlValue("select vehicle_registration_number from breakdown_services where breakdown_id='" . makeSafe($filterer_total_cost) . "'");
	if($filterer_total_cost && !$filterer_date_of_service) $filterer_date_of_service = sqlValue("select workshop_name from breakdown_services where breakdown_id='" . makeSafe($filterer_total_cost) . "'");
	if($filterer_total_cost && !$filterer_closing_km) $filterer_closing_km = sqlValue("select closing_km from breakdown_services where breakdown_id='" . makeSafe($filterer_total_cost) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: vehicle_registration_number
	$combo_vehicle_registration_number = new DataCombo;
	// combobox: date_of_vehicle_transfer
	$combo_date_of_vehicle_transfer = new DateCombo;
	$combo_date_of_vehicle_transfer->DateFormat = "dmy";
	$combo_date_of_vehicle_transfer->MinYear = defined('vehicle_history.date_of_vehicle_transfer.MinYear') ? constant('vehicle_history.date_of_vehicle_transfer.MinYear') : 1900;
	$combo_date_of_vehicle_transfer->MaxYear = defined('vehicle_history.date_of_vehicle_transfer.MaxYear') ? constant('vehicle_history.date_of_vehicle_transfer.MaxYear') : 2100;
	$combo_date_of_vehicle_transfer->DefaultDate = parseMySQLDate('', '');
	$combo_date_of_vehicle_transfer->MonthNames = $Translation['month names'];
	$combo_date_of_vehicle_transfer->NamePrefix = 'date_of_vehicle_transfer';
	// combobox: date_of_service, filterable by: vehicle_registration_number,closing_km
	$combo_date_of_service = new DataCombo;
	// combobox: purchased_order_number, filterable by: vehicle_registration_number
	$combo_purchased_order_number = new DataCombo;
	// combobox: claim_code, filterable by: vehicle_registration_number,closing_km
	$combo_claim_code = new DataCombo;
	// combobox: tyre_inspection_report, filterable by: vehicle_registration_number
	$combo_tyre_inspection_report = new DataCombo;
	// combobox: inspection_certification_number, filterable by: vehicle_registration_number,closing_km
	$combo_inspection_certification_number = new DataCombo;
	// combobox: document_checklist_report, filterable by: vehicle_registration_number
	$combo_document_checklist_report = new DataCombo;
	// combobox: next_inspection_date, filterable by: vehicle_registration_number,closing_km
	$combo_next_inspection_date = new DataCombo;
	// combobox: breakdown_of_vehicle
	$combo_breakdown_of_vehicle = new Combo;
	$combo_breakdown_of_vehicle->ListType = 2;
	$combo_breakdown_of_vehicle->MultipleSeparator = ', ';
	$combo_breakdown_of_vehicle->ListBoxHeight = 10;
	$combo_breakdown_of_vehicle->RadiosPerLine = 1;
	if(is_file(__DIR__ . '/hooks/vehicle_history.breakdown_of_vehicle.csv')) {
		$breakdown_of_vehicle_data = addslashes(implode('', @file(__DIR__ . '/hooks/vehicle_history.breakdown_of_vehicle.csv')));
		$combo_breakdown_of_vehicle->ListItem = array_trim(explode('||', entitiesToUTF8(convertLegacyOptions($breakdown_of_vehicle_data))));
		$combo_breakdown_of_vehicle->ListData = $combo_breakdown_of_vehicle->ListItem;
	} else {
		$combo_breakdown_of_vehicle->ListItem = array_trim(explode('||', entitiesToUTF8(convertLegacyOptions("Yes;;No"))));
		$combo_breakdown_of_vehicle->ListData = $combo_breakdown_of_vehicle->ListItem;
	}
	$combo_breakdown_of_vehicle->SelectName = 'breakdown_of_vehicle';
	// combobox: date_of_vehicle_breakdown
	$combo_date_of_vehicle_breakdown = new DateCombo;
	$combo_date_of_vehicle_breakdown->DateFormat = "dmy";
	$combo_date_of_vehicle_breakdown->MinYear = defined('vehicle_history.date_of_vehicle_breakdown.MinYear') ? constant('vehicle_history.date_of_vehicle_breakdown.MinYear') : 1900;
	$combo_date_of_vehicle_breakdown->MaxYear = defined('vehicle_history.date_of_vehicle_breakdown.MaxYear') ? constant('vehicle_history.date_of_vehicle_breakdown.MaxYear') : 2100;
	$combo_date_of_vehicle_breakdown->DefaultDate = parseMySQLDate('', '');
	$combo_date_of_vehicle_breakdown->MonthNames = $Translation['month names'];
	$combo_date_of_vehicle_breakdown->NamePrefix = 'date_of_vehicle_breakdown';
	// combobox: closing_km, filterable by: vehicle_registration_number
	$combo_closing_km = new DataCombo;
	// combobox: total_cost, filterable by: vehicle_registration_number,date_of_service,closing_km
	$combo_total_cost = new DataCombo;

	if($selected_id) {
		// mm: check member permissions
		if(!$arrPerm['view']) return $Translation['tableAccessDenied'];

		// mm: who is the owner?
		$ownerGroupID = sqlValue("SELECT `groupID` FROM `membership_userrecords` WHERE `tableName`='vehicle_history' AND `pkValue`='" . makeSafe($selected_id) . "'");
		$ownerMemberID = sqlValue("SELECT LCASE(`memberID`) FROM `membership_userrecords` WHERE `tableName`='vehicle_history' AND `pkValue`='" . makeSafe($selected_id) . "'");

		if($arrPerm['view'] == 1 && getLoggedMemberID() != $ownerMemberID) return $Translation['tableAccessDenied'];
		if($arrPerm['view'] == 2 && getLoggedGroupID() != $ownerGroupID) return $Translation['tableAccessDenied'];

		// can edit?
		$AllowUpdate = 0;
		if(($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3) {
			$AllowUpdate = 1;
		}

		$res = sql("SELECT * FROM `vehicle_history` WHERE `history_id`='" . makeSafe($selected_id) . "'", $eo);
		if(!($row = db_fetch_array($res))) {
			return error_message($Translation['No records found'], 'vehicle_history_view.php', false);
		}
		$combo_vehicle_registration_number->SelectedData = $row['vehicle_registration_number'];
		$combo_date_of_vehicle_transfer->DefaultDate = $row['date_of_vehicle_transfer'];
		$combo_date_of_service->SelectedData = $row['date_of_service'];
		$combo_purchased_order_number->SelectedData = $row['purchased_order_number'];
		$combo_claim_code->SelectedData = $row['claim_code'];
		$combo_tyre_inspection_report->SelectedData = $row['tyre_inspection_report'];
		$combo_inspection_certification_number->SelectedData = $row['inspection_certification_number'];
		$combo_document_checklist_report->SelectedData = $row['document_checklist_report'];
		$combo_next_inspection_date->SelectedData = $row['next_inspection_date'];
		$combo_breakdown_of_vehicle->SelectedData = $row['breakdown_of_vehicle'];
		$combo_date_of_vehicle_breakdown->DefaultDate = $row['date_of_vehicle_breakdown'];
		$combo_closing_km->SelectedData = $row['closing_km'];
		$combo_total_cost->SelectedData = $row['total_cost'];
		$urow = $row; /* unsanitized data */
		$row = array_map('safe_html', $row);
	} else {
		$filterField = Request::val('FilterField');
		$filterOperator = Request::val('FilterOperator');
		$filterValue = Request::val('FilterValue');
		$combo_vehicle_registration_number->SelectedData = $filterer_vehicle_registration_number;
		$combo_date_of_service->SelectedData = $filterer_date_of_service;
		$combo_purchased_order_number->SelectedData = $filterer_purchased_order_number;
		$combo_claim_code->SelectedData = $filterer_claim_code;
		$combo_tyre_inspection_report->SelectedData = $filterer_tyre_inspection_report;
		$combo_inspection_certification_number->SelectedData = $filterer_inspection_certification_number;
		$combo_document_checklist_report->SelectedData = $filterer_document_checklist_report;
		$combo_next_inspection_date->SelectedData = $filterer_next_inspection_date;
		$combo_breakdown_of_vehicle->SelectedText = (isset($filterField[1]) && $filterField[1] == '18' && $filterOperator[1] == '<=>' ? $filterValue[1] : '');
		$combo_closing_km->SelectedData = $filterer_closing_km;
		$combo_total_cost->SelectedData = $filterer_total_cost;
	}
	$combo_vehicle_registration_number->HTML = '<span id="vehicle_registration_number-container' . $rnd1 . '"></span><input type="hidden" name="vehicle_registration_number" id="vehicle_registration_number' . $rnd1 . '" value="' . html_attr($combo_vehicle_registration_number->SelectedData) . '">';
	$combo_vehicle_registration_number->MatchText = '<span id="vehicle_registration_number-container-readonly' . $rnd1 . '"></span><input type="hidden" name="vehicle_registration_number" id="vehicle_registration_number' . $rnd1 . '" value="' . html_attr($combo_vehicle_registration_number->SelectedData) . '">';
	$combo_date_of_service->HTML = '<span id="date_of_service-container' . $rnd1 . '"></span><input type="hidden" name="date_of_service" id="date_of_service' . $rnd1 . '" value="' . html_attr($combo_date_of_service->SelectedData) . '">';
	$combo_date_of_service->MatchText = '<span id="date_of_service-container-readonly' . $rnd1 . '"></span><input type="hidden" name="date_of_service" id="date_of_service' . $rnd1 . '" value="' . html_attr($combo_date_of_service->SelectedData) . '">';
	$combo_purchased_order_number->HTML = '<span id="purchased_order_number-container' . $rnd1 . '"></span><input type="hidden" name="purchased_order_number" id="purchased_order_number' . $rnd1 . '" value="' . html_attr($combo_purchased_order_number->SelectedData) . '">';
	$combo_purchased_order_number->MatchText = '<span id="purchased_order_number-container-readonly' . $rnd1 . '"></span><input type="hidden" name="purchased_order_number" id="purchased_order_number' . $rnd1 . '" value="' . html_attr($combo_purchased_order_number->SelectedData) . '">';
	$combo_claim_code->HTML = '<span id="claim_code-container' . $rnd1 . '"></span><input type="hidden" name="claim_code" id="claim_code' . $rnd1 . '" value="' . html_attr($combo_claim_code->SelectedData) . '">';
	$combo_claim_code->MatchText = '<span id="claim_code-container-readonly' . $rnd1 . '"></span><input type="hidden" name="claim_code" id="claim_code' . $rnd1 . '" value="' . html_attr($combo_claim_code->SelectedData) . '">';
	$combo_tyre_inspection_report->HTML = '<span id="tyre_inspection_report-container' . $rnd1 . '"></span><input type="hidden" name="tyre_inspection_report" id="tyre_inspection_report' . $rnd1 . '" value="' . html_attr($combo_tyre_inspection_report->SelectedData) . '">';
	$combo_tyre_inspection_report->MatchText = '<span id="tyre_inspection_report-container-readonly' . $rnd1 . '"></span><input type="hidden" name="tyre_inspection_report" id="tyre_inspection_report' . $rnd1 . '" value="' . html_attr($combo_tyre_inspection_report->SelectedData) . '">';
	$combo_inspection_certification_number->HTML = '<span id="inspection_certification_number-container' . $rnd1 . '"></span><input type="hidden" name="inspection_certification_number" id="inspection_certification_number' . $rnd1 . '" value="' . html_attr($combo_inspection_certification_number->SelectedData) . '">';
	$combo_inspection_certification_number->MatchText = '<span id="inspection_certification_number-container-readonly' . $rnd1 . '"></span><input type="hidden" name="inspection_certification_number" id="inspection_certification_number' . $rnd1 . '" value="' . html_attr($combo_inspection_certification_number->SelectedData) . '">';
	$combo_document_checklist_report->HTML = '<span id="document_checklist_report-container' . $rnd1 . '"></span><input type="hidden" name="document_checklist_report" id="document_checklist_report' . $rnd1 . '" value="' . html_attr($combo_document_checklist_report->SelectedData) . '">';
	$combo_document_checklist_report->MatchText = '<span id="document_checklist_report-container-readonly' . $rnd1 . '"></span><input type="hidden" name="document_checklist_report" id="document_checklist_report' . $rnd1 . '" value="' . html_attr($combo_document_checklist_report->SelectedData) . '">';
	$combo_next_inspection_date->HTML = '<span id="next_inspection_date-container' . $rnd1 . '"></span><input type="hidden" name="next_inspection_date" id="next_inspection_date' . $rnd1 . '" value="' . html_attr($combo_next_inspection_date->SelectedData) . '">';
	$combo_next_inspection_date->MatchText = '<span id="next_inspection_date-container-readonly' . $rnd1 . '"></span><input type="hidden" name="next_inspection_date" id="next_inspection_date' . $rnd1 . '" value="' . html_attr($combo_next_inspection_date->SelectedData) . '">';
	$combo_breakdown_of_vehicle->Render();
	$combo_closing_km->HTML = '<span id="closing_km-container' . $rnd1 . '"></span><input type="hidden" name="closing_km" id="closing_km' . $rnd1 . '" value="' . html_attr($combo_closing_km->SelectedData) . '">';
	$combo_closing_km->MatchText = '<span id="closing_km-container-readonly' . $rnd1 . '"></span><input type="hidden" name="closing_km" id="closing_km' . $rnd1 . '" value="' . html_attr($combo_closing_km->SelectedData) . '">';
	$combo_total_cost->HTML = '<span id="total_cost-container' . $rnd1 . '"></span><input type="hidden" name="total_cost" id="total_cost' . $rnd1 . '" value="' . html_attr($combo_total_cost->SelectedData) . '">';
	$combo_total_cost->MatchText = '<span id="total_cost-container-readonly' . $rnd1 . '"></span><input type="hidden" name="total_cost" id="total_cost' . $rnd1 . '" value="' . html_attr($combo_total_cost->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_vehicle_registration_number__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['vehicle_registration_number'] : htmlspecialchars($filterer_vehicle_registration_number, ENT_QUOTES)); ?>"};
		AppGini.current_date_of_service__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['date_of_service'] : htmlspecialchars($filterer_date_of_service, ENT_QUOTES)); ?>"};
		AppGini.current_purchased_order_number__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['purchased_order_number'] : htmlspecialchars($filterer_purchased_order_number, ENT_QUOTES)); ?>"};
		AppGini.current_claim_code__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['claim_code'] : htmlspecialchars($filterer_claim_code, ENT_QUOTES)); ?>"};
		AppGini.current_tyre_inspection_report__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['tyre_inspection_report'] : htmlspecialchars($filterer_tyre_inspection_report, ENT_QUOTES)); ?>"};
		AppGini.current_inspection_certification_number__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['inspection_certification_number'] : htmlspecialchars($filterer_inspection_certification_number, ENT_QUOTES)); ?>"};
		AppGini.current_document_checklist_report__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['document_checklist_report'] : htmlspecialchars($filterer_document_checklist_report, ENT_QUOTES)); ?>"};
		AppGini.current_next_inspection_date__RAND__ = { text: "<?php echo ($selected_id ? '' : '1'); ?>", value: "<?php echo addslashes($selected_id ? $urow['next_inspection_date'] : htmlspecialchars($filterer_next_inspection_date, ENT_QUOTES)); ?>"};
		AppGini.current_closing_km__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['closing_km'] : htmlspecialchars($filterer_closing_km, ENT_QUOTES)); ?>"};
		AppGini.current_total_cost__RAND__ = { text: "<?php echo ($selected_id ? '' : '0.00'); ?>", value: "<?php echo addslashes($selected_id ? $urow['total_cost'] : htmlspecialchars($filterer_total_cost, ENT_QUOTES)); ?>"};

		jQuery(function() {
			setTimeout(function() {
				if(typeof(vehicle_registration_number_reload__RAND__) == 'function') vehicle_registration_number_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(date_of_service_reload__RAND__) == \'function\') date_of_service_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, AppGini.current_closing_km__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(purchased_order_number_reload__RAND__) == \'function\') purchased_order_number_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(claim_code_reload__RAND__) == \'function\') claim_code_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, AppGini.current_closing_km__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(tyre_inspection_report_reload__RAND__) == \'function\') tyre_inspection_report_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(inspection_certification_number_reload__RAND__) == \'function\') inspection_certification_number_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, AppGini.current_closing_km__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(document_checklist_report_reload__RAND__) == \'function\') document_checklist_report_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(next_inspection_date_reload__RAND__) == \'function\') next_inspection_date_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, AppGini.current_closing_km__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(closing_km_reload__RAND__) == \'function\') closing_km_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(total_cost_reload__RAND__) == \'function\') total_cost_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, AppGini.current_date_of_service__RAND__.value, AppGini.current_closing_km__RAND__.value);' : ''); ?>
			}, 50); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function vehicle_registration_number_reload__RAND__() {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#vehicle_registration_number-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_vehicle_registration_number__RAND__.value, t: 'vehicle_history', f: 'vehicle_registration_number' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="vehicle_registration_number"]').val(resp.results[0].id);
							$j('[id=vehicle_registration_number-container-readonly__RAND__]').html('<span class="match-text" id="vehicle_registration_number-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

						if(typeof(date_of_service_reload__RAND__) == 'function') date_of_service_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, $j('#closing_km').val());
						if(typeof(date_of_next_service_reload__RAND__) == 'function') date_of_next_service_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);
						if(typeof(purchased_order_number_reload__RAND__) == 'function') purchased_order_number_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);
						if(typeof(claim_code_reload__RAND__) == 'function') claim_code_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, $j('#closing_km').val());
						if(typeof(tyre_inspection_report_reload__RAND__) == 'function') tyre_inspection_report_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);
						if(typeof(inspection_certification_number_reload__RAND__) == 'function') inspection_certification_number_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, $j('#closing_km').val());
						if(typeof(document_checklist_report_reload__RAND__) == 'function') document_checklist_report_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);
						if(typeof(next_inspection_date_reload__RAND__) == 'function') next_inspection_date_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, $j('#closing_km').val());
						if(typeof(closing_km_reload__RAND__) == 'function') closing_km_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);

							if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'vehicle_history', f: 'vehicle_registration_number' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_vehicle_registration_number__RAND__.value = e.added.id;
				AppGini.current_vehicle_registration_number__RAND__.text = e.added.text;
				$j('[name="vehicle_registration_number"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

						if(typeof(date_of_service_reload__RAND__) == 'function') date_of_service_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, $j('#closing_km').val());
						if(typeof(date_of_next_service_reload__RAND__) == 'function') date_of_next_service_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);
						if(typeof(purchased_order_number_reload__RAND__) == 'function') purchased_order_number_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);
						if(typeof(claim_code_reload__RAND__) == 'function') claim_code_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, $j('#closing_km').val());
						if(typeof(tyre_inspection_report_reload__RAND__) == 'function') tyre_inspection_report_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);
						if(typeof(inspection_certification_number_reload__RAND__) == 'function') inspection_certification_number_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, $j('#closing_km').val());
						if(typeof(document_checklist_report_reload__RAND__) == 'function') document_checklist_report_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);
						if(typeof(next_inspection_date_reload__RAND__) == 'function') next_inspection_date_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value, $j('#closing_km').val());
						if(typeof(closing_km_reload__RAND__) == 'function') closing_km_reload__RAND__(AppGini.current_vehicle_registration_number__RAND__.value);

				if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
			});

			if(!$j("#vehicle_registration_number-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_vehicle_registration_number__RAND__.value, t: 'vehicle_history', f: 'vehicle_registration_number' },
					success: function(resp) {
						$j('[name="vehicle_registration_number"]').val(resp.results[0].id);
						$j('[id=vehicle_registration_number-container-readonly__RAND__]').html('<span class="match-text" id="vehicle_registration_number-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

						if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_vehicle_registration_number__RAND__.value, t: 'vehicle_history', f: 'vehicle_registration_number' },
				success: function(resp) {
					$j('[id=vehicle_registration_number-container__RAND__], [id=vehicle_registration_number-container-readonly__RAND__]').html('<span class="match-text" id="vehicle_registration_number-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=gmt_fleet_register_view_parent]').hide(); } else { $j('.btn[id=gmt_fleet_register_view_parent]').show(); }

					if(typeof(vehicle_registration_number_update_autofills__RAND__) == 'function') vehicle_registration_number_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function date_of_service_reload__RAND__(filterer_vehicle_registration_number, filterer_closing_km) {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#date_of_service-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_vehicle_registration_number: filterer_vehicle_registration_number, filterer_closing_km: filterer_closing_km, id: AppGini.current_date_of_service__RAND__.value, t: 'vehicle_history', f: 'date_of_service' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="date_of_service"]').val(resp.results[0].id);
							$j('[id=date_of_service-container-readonly__RAND__]').html('<span class="match-text" id="date_of_service-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=service_view_parent]').hide(); } else { $j('.btn[id=service_view_parent]').show(); }

						if(typeof(total_cost_reload__RAND__) == 'function') total_cost_reload__RAND__($j('#vehicle_registration_number').val(), AppGini.current_date_of_service__RAND__.value, $j('#closing_km').val());

							if(typeof(date_of_service_update_autofills__RAND__) == 'function') date_of_service_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_vehicle_registration_number: filterer_vehicle_registration_number, filterer_closing_km: filterer_closing_km, s: term, p: page, t: 'vehicle_history', f: 'date_of_service' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_date_of_service__RAND__.value = e.added.id;
				AppGini.current_date_of_service__RAND__.text = e.added.text;
				$j('[name="date_of_service"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=service_view_parent]').hide(); } else { $j('.btn[id=service_view_parent]').show(); }

						if(typeof(total_cost_reload__RAND__) == 'function') total_cost_reload__RAND__($j('#vehicle_registration_number').val(), AppGini.current_date_of_service__RAND__.value, $j('#closing_km').val());

				if(typeof(date_of_service_update_autofills__RAND__) == 'function') date_of_service_update_autofills__RAND__();
			});

			if(!$j("#date_of_service-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_date_of_service__RAND__.value, t: 'vehicle_history', f: 'date_of_service' },
					success: function(resp) {
						$j('[name="date_of_service"]').val(resp.results[0].id);
						$j('[id=date_of_service-container-readonly__RAND__]').html('<span class="match-text" id="date_of_service-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=service_view_parent]').hide(); } else { $j('.btn[id=service_view_parent]').show(); }

						if(typeof(date_of_service_update_autofills__RAND__) == 'function') date_of_service_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_date_of_service__RAND__.value, t: 'vehicle_history', f: 'date_of_service' },
				success: function(resp) {
					$j('[id=date_of_service-container__RAND__], [id=date_of_service-container-readonly__RAND__]').html('<span class="match-text" id="date_of_service-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=service_view_parent]').hide(); } else { $j('.btn[id=service_view_parent]').show(); }

					if(typeof(date_of_service_update_autofills__RAND__) == 'function') date_of_service_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function purchased_order_number_reload__RAND__(filterer_vehicle_registration_number) {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#purchased_order_number-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_vehicle_registration_number: filterer_vehicle_registration_number, id: AppGini.current_purchased_order_number__RAND__.value, t: 'vehicle_history', f: 'purchased_order_number' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="purchased_order_number"]').val(resp.results[0].id);
							$j('[id=purchased_order_number-container-readonly__RAND__]').html('<span class="match-text" id="purchased_order_number-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=purchase_orders_view_parent]').hide(); } else { $j('.btn[id=purchase_orders_view_parent]').show(); }


							if(typeof(purchased_order_number_update_autofills__RAND__) == 'function') purchased_order_number_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_vehicle_registration_number: filterer_vehicle_registration_number, s: term, p: page, t: 'vehicle_history', f: 'purchased_order_number' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_purchased_order_number__RAND__.value = e.added.id;
				AppGini.current_purchased_order_number__RAND__.text = e.added.text;
				$j('[name="purchased_order_number"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=purchase_orders_view_parent]').hide(); } else { $j('.btn[id=purchase_orders_view_parent]').show(); }


				if(typeof(purchased_order_number_update_autofills__RAND__) == 'function') purchased_order_number_update_autofills__RAND__();
			});

			if(!$j("#purchased_order_number-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_purchased_order_number__RAND__.value, t: 'vehicle_history', f: 'purchased_order_number' },
					success: function(resp) {
						$j('[name="purchased_order_number"]').val(resp.results[0].id);
						$j('[id=purchased_order_number-container-readonly__RAND__]').html('<span class="match-text" id="purchased_order_number-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=purchase_orders_view_parent]').hide(); } else { $j('.btn[id=purchase_orders_view_parent]').show(); }

						if(typeof(purchased_order_number_update_autofills__RAND__) == 'function') purchased_order_number_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_purchased_order_number__RAND__.value, t: 'vehicle_history', f: 'purchased_order_number' },
				success: function(resp) {
					$j('[id=purchased_order_number-container__RAND__], [id=purchased_order_number-container-readonly__RAND__]').html('<span class="match-text" id="purchased_order_number-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=purchase_orders_view_parent]').hide(); } else { $j('.btn[id=purchase_orders_view_parent]').show(); }

					if(typeof(purchased_order_number_update_autofills__RAND__) == 'function') purchased_order_number_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function claim_code_reload__RAND__(filterer_vehicle_registration_number, filterer_closing_km) {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#claim_code-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_vehicle_registration_number: filterer_vehicle_registration_number, filterer_closing_km: filterer_closing_km, id: AppGini.current_claim_code__RAND__.value, t: 'vehicle_history', f: 'claim_code' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="claim_code"]').val(resp.results[0].id);
							$j('[id=claim_code-container-readonly__RAND__]').html('<span class="match-text" id="claim_code-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_view_parent]').hide(); } else { $j('.btn[id=claim_view_parent]').show(); }


							if(typeof(claim_code_update_autofills__RAND__) == 'function') claim_code_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_vehicle_registration_number: filterer_vehicle_registration_number, filterer_closing_km: filterer_closing_km, s: term, p: page, t: 'vehicle_history', f: 'claim_code' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_claim_code__RAND__.value = e.added.id;
				AppGini.current_claim_code__RAND__.text = e.added.text;
				$j('[name="claim_code"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_view_parent]').hide(); } else { $j('.btn[id=claim_view_parent]').show(); }


				if(typeof(claim_code_update_autofills__RAND__) == 'function') claim_code_update_autofills__RAND__();
			});

			if(!$j("#claim_code-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_claim_code__RAND__.value, t: 'vehicle_history', f: 'claim_code' },
					success: function(resp) {
						$j('[name="claim_code"]').val(resp.results[0].id);
						$j('[id=claim_code-container-readonly__RAND__]').html('<span class="match-text" id="claim_code-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_view_parent]').hide(); } else { $j('.btn[id=claim_view_parent]').show(); }

						if(typeof(claim_code_update_autofills__RAND__) == 'function') claim_code_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_claim_code__RAND__.value, t: 'vehicle_history', f: 'claim_code' },
				success: function(resp) {
					$j('[id=claim_code-container__RAND__], [id=claim_code-container-readonly__RAND__]').html('<span class="match-text" id="claim_code-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=claim_view_parent]').hide(); } else { $j('.btn[id=claim_view_parent]').show(); }

					if(typeof(claim_code_update_autofills__RAND__) == 'function') claim_code_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function tyre_inspection_report_reload__RAND__(filterer_vehicle_registration_number) {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#tyre_inspection_report-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_vehicle_registration_number: filterer_vehicle_registration_number, id: AppGini.current_tyre_inspection_report__RAND__.value, t: 'vehicle_history', f: 'tyre_inspection_report' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="tyre_inspection_report"]').val(resp.results[0].id);
							$j('[id=tyre_inspection_report-container-readonly__RAND__]').html('<span class="match-text" id="tyre_inspection_report-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=tyre_log_sheet_view_parent]').hide(); } else { $j('.btn[id=tyre_log_sheet_view_parent]').show(); }


							if(typeof(tyre_inspection_report_update_autofills__RAND__) == 'function') tyre_inspection_report_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_vehicle_registration_number: filterer_vehicle_registration_number, s: term, p: page, t: 'vehicle_history', f: 'tyre_inspection_report' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_tyre_inspection_report__RAND__.value = e.added.id;
				AppGini.current_tyre_inspection_report__RAND__.text = e.added.text;
				$j('[name="tyre_inspection_report"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=tyre_log_sheet_view_parent]').hide(); } else { $j('.btn[id=tyre_log_sheet_view_parent]').show(); }


				if(typeof(tyre_inspection_report_update_autofills__RAND__) == 'function') tyre_inspection_report_update_autofills__RAND__();
			});

			if(!$j("#tyre_inspection_report-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_tyre_inspection_report__RAND__.value, t: 'vehicle_history', f: 'tyre_inspection_report' },
					success: function(resp) {
						$j('[name="tyre_inspection_report"]').val(resp.results[0].id);
						$j('[id=tyre_inspection_report-container-readonly__RAND__]').html('<span class="match-text" id="tyre_inspection_report-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=tyre_log_sheet_view_parent]').hide(); } else { $j('.btn[id=tyre_log_sheet_view_parent]').show(); }

						if(typeof(tyre_inspection_report_update_autofills__RAND__) == 'function') tyre_inspection_report_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_tyre_inspection_report__RAND__.value, t: 'vehicle_history', f: 'tyre_inspection_report' },
				success: function(resp) {
					$j('[id=tyre_inspection_report-container__RAND__], [id=tyre_inspection_report-container-readonly__RAND__]').html('<span class="match-text" id="tyre_inspection_report-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=tyre_log_sheet_view_parent]').hide(); } else { $j('.btn[id=tyre_log_sheet_view_parent]').show(); }

					if(typeof(tyre_inspection_report_update_autofills__RAND__) == 'function') tyre_inspection_report_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function inspection_certification_number_reload__RAND__(filterer_vehicle_registration_number, filterer_closing_km) {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#inspection_certification_number-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_vehicle_registration_number: filterer_vehicle_registration_number, filterer_closing_km: filterer_closing_km, id: AppGini.current_inspection_certification_number__RAND__.value, t: 'vehicle_history', f: 'inspection_certification_number' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="inspection_certification_number"]').val(resp.results[0].id);
							$j('[id=inspection_certification_number-container-readonly__RAND__]').html('<span class="match-text" id="inspection_certification_number-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }


							if(typeof(inspection_certification_number_update_autofills__RAND__) == 'function') inspection_certification_number_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_vehicle_registration_number: filterer_vehicle_registration_number, filterer_closing_km: filterer_closing_km, s: term, p: page, t: 'vehicle_history', f: 'inspection_certification_number' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_inspection_certification_number__RAND__.value = e.added.id;
				AppGini.current_inspection_certification_number__RAND__.text = e.added.text;
				$j('[name="inspection_certification_number"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }


				if(typeof(inspection_certification_number_update_autofills__RAND__) == 'function') inspection_certification_number_update_autofills__RAND__();
			});

			if(!$j("#inspection_certification_number-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_inspection_certification_number__RAND__.value, t: 'vehicle_history', f: 'inspection_certification_number' },
					success: function(resp) {
						$j('[name="inspection_certification_number"]').val(resp.results[0].id);
						$j('[id=inspection_certification_number-container-readonly__RAND__]').html('<span class="match-text" id="inspection_certification_number-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }

						if(typeof(inspection_certification_number_update_autofills__RAND__) == 'function') inspection_certification_number_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_inspection_certification_number__RAND__.value, t: 'vehicle_history', f: 'inspection_certification_number' },
				success: function(resp) {
					$j('[id=inspection_certification_number-container__RAND__], [id=inspection_certification_number-container-readonly__RAND__]').html('<span class="match-text" id="inspection_certification_number-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }

					if(typeof(inspection_certification_number_update_autofills__RAND__) == 'function') inspection_certification_number_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function document_checklist_report_reload__RAND__(filterer_vehicle_registration_number) {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#document_checklist_report-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_vehicle_registration_number: filterer_vehicle_registration_number, id: AppGini.current_document_checklist_report__RAND__.value, t: 'vehicle_history', f: 'document_checklist_report' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="document_checklist_report"]').val(resp.results[0].id);
							$j('[id=document_checklist_report-container-readonly__RAND__]').html('<span class="match-text" id="document_checklist_report-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }


							if(typeof(document_checklist_report_update_autofills__RAND__) == 'function') document_checklist_report_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_vehicle_registration_number: filterer_vehicle_registration_number, s: term, p: page, t: 'vehicle_history', f: 'document_checklist_report' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_document_checklist_report__RAND__.value = e.added.id;
				AppGini.current_document_checklist_report__RAND__.text = e.added.text;
				$j('[name="document_checklist_report"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }


				if(typeof(document_checklist_report_update_autofills__RAND__) == 'function') document_checklist_report_update_autofills__RAND__();
			});

			if(!$j("#document_checklist_report-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_document_checklist_report__RAND__.value, t: 'vehicle_history', f: 'document_checklist_report' },
					success: function(resp) {
						$j('[name="document_checklist_report"]').val(resp.results[0].id);
						$j('[id=document_checklist_report-container-readonly__RAND__]').html('<span class="match-text" id="document_checklist_report-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }

						if(typeof(document_checklist_report_update_autofills__RAND__) == 'function') document_checklist_report_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_document_checklist_report__RAND__.value, t: 'vehicle_history', f: 'document_checklist_report' },
				success: function(resp) {
					$j('[id=document_checklist_report-container__RAND__], [id=document_checklist_report-container-readonly__RAND__]').html('<span class="match-text" id="document_checklist_report-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }

					if(typeof(document_checklist_report_update_autofills__RAND__) == 'function') document_checklist_report_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function next_inspection_date_reload__RAND__(filterer_vehicle_registration_number, filterer_closing_km) {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#next_inspection_date-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						<?php if(!$selected_id && !$filterer_next_inspection_date) { ?>
							data: { text: '1', t: 'vehicle_history', f: 'next_inspection_date' },
						<?php } else { ?>
							data: { filterer_vehicle_registration_number: filterer_vehicle_registration_number, filterer_closing_km: filterer_closing_km, id: AppGini.current_next_inspection_date__RAND__.value, t: 'vehicle_history', f: 'next_inspection_date' },
						<?php } ?>

						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="next_inspection_date"]').val(resp.results[0].id);
							$j('[id=next_inspection_date-container-readonly__RAND__]').html('<span class="match-text" id="next_inspection_date-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }


							if(typeof(next_inspection_date_update_autofills__RAND__) == 'function') next_inspection_date_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_vehicle_registration_number: filterer_vehicle_registration_number, filterer_closing_km: filterer_closing_km, s: term, p: page, t: 'vehicle_history', f: 'next_inspection_date' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_next_inspection_date__RAND__.value = e.added.id;
				AppGini.current_next_inspection_date__RAND__.text = e.added.text;
				$j('[name="next_inspection_date"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }


				if(typeof(next_inspection_date_update_autofills__RAND__) == 'function') next_inspection_date_update_autofills__RAND__();
			});

			if(!$j("#next_inspection_date-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_next_inspection_date__RAND__.value, t: 'vehicle_history', f: 'next_inspection_date' },
					success: function(resp) {
						$j('[name="next_inspection_date"]').val(resp.results[0].id);
						$j('[id=next_inspection_date-container-readonly__RAND__]').html('<span class="match-text" id="next_inspection_date-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }

						if(typeof(next_inspection_date_update_autofills__RAND__) == 'function') next_inspection_date_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_next_inspection_date__RAND__.value, t: 'vehicle_history', f: 'next_inspection_date' },
				success: function(resp) {
					$j('[id=next_inspection_date-container__RAND__], [id=next_inspection_date-container-readonly__RAND__]').html('<span class="match-text" id="next_inspection_date-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=vehicle_daily_check_list_view_parent]').hide(); } else { $j('.btn[id=vehicle_daily_check_list_view_parent]').show(); }

					if(typeof(next_inspection_date_update_autofills__RAND__) == 'function') next_inspection_date_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function closing_km_reload__RAND__(filterer_vehicle_registration_number) {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#closing_km-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_vehicle_registration_number: filterer_vehicle_registration_number, id: AppGini.current_closing_km__RAND__.value, t: 'vehicle_history', f: 'closing_km' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="closing_km"]').val(resp.results[0].id);
							$j('[id=closing_km-container-readonly__RAND__]').html('<span class="match-text" id="closing_km-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }

						if(typeof(date_of_service_reload__RAND__) == 'function') date_of_service_reload__RAND__($j('#vehicle_registration_number').val(), AppGini.current_closing_km__RAND__.value);
						if(typeof(claim_code_reload__RAND__) == 'function') claim_code_reload__RAND__($j('#vehicle_registration_number').val(), AppGini.current_closing_km__RAND__.value);
						if(typeof(inspection_certification_number_reload__RAND__) == 'function') inspection_certification_number_reload__RAND__($j('#vehicle_registration_number').val(), AppGini.current_closing_km__RAND__.value);
						if(typeof(next_inspection_date_reload__RAND__) == 'function') next_inspection_date_reload__RAND__($j('#vehicle_registration_number').val(), AppGini.current_closing_km__RAND__.value);

							if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_vehicle_registration_number: filterer_vehicle_registration_number, s: term, p: page, t: 'vehicle_history', f: 'closing_km' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_closing_km__RAND__.value = e.added.id;
				AppGini.current_closing_km__RAND__.text = e.added.text;
				$j('[name="closing_km"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }

						if(typeof(date_of_service_reload__RAND__) == 'function') date_of_service_reload__RAND__($j('#vehicle_registration_number').val(), AppGini.current_closing_km__RAND__.value);
						if(typeof(claim_code_reload__RAND__) == 'function') claim_code_reload__RAND__($j('#vehicle_registration_number').val(), AppGini.current_closing_km__RAND__.value);
						if(typeof(inspection_certification_number_reload__RAND__) == 'function') inspection_certification_number_reload__RAND__($j('#vehicle_registration_number').val(), AppGini.current_closing_km__RAND__.value);
						if(typeof(next_inspection_date_reload__RAND__) == 'function') next_inspection_date_reload__RAND__($j('#vehicle_registration_number').val(), AppGini.current_closing_km__RAND__.value);

				if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
			});

			if(!$j("#closing_km-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_closing_km__RAND__.value, t: 'vehicle_history', f: 'closing_km' },
					success: function(resp) {
						$j('[name="closing_km"]').val(resp.results[0].id);
						$j('[id=closing_km-container-readonly__RAND__]').html('<span class="match-text" id="closing_km-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }

						if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_closing_km__RAND__.value, t: 'vehicle_history', f: 'closing_km' },
				success: function(resp) {
					$j('[id=closing_km-container__RAND__], [id=closing_km-container-readonly__RAND__]').html('<span class="match-text" id="closing_km-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=log_sheet_view_parent]').hide(); } else { $j('.btn[id=log_sheet_view_parent]').show(); }

					if(typeof(closing_km_update_autofills__RAND__) == 'function') closing_km_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function total_cost_reload__RAND__(filterer_vehicle_registration_number, filterer_date_of_service, filterer_closing_km) {
		<?php if(($AllowUpdate || ($arrPerm['insert'] && !$selected_id)) && !$dvprint) { ?>

			$j("#total_cost-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						<?php if(!$selected_id && !$filterer_total_cost) { ?>
							data: { text: '0.00', t: 'vehicle_history', f: 'total_cost' },
						<?php } else { ?>
							data: { filterer_vehicle_registration_number: filterer_vehicle_registration_number, filterer_date_of_service: filterer_date_of_service, filterer_closing_km: filterer_closing_km, id: AppGini.current_total_cost__RAND__.value, t: 'vehicle_history', f: 'total_cost' },
						<?php } ?>

						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="total_cost"]').val(resp.results[0].id);
							$j('[id=total_cost-container-readonly__RAND__]').html('<span class="match-text" id="total_cost-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=breakdown_services_view_parent]').hide(); } else { $j('.btn[id=breakdown_services_view_parent]').show(); }


							if(typeof(total_cost_update_autofills__RAND__) == 'function') total_cost_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_vehicle_registration_number: filterer_vehicle_registration_number, filterer_date_of_service: filterer_date_of_service, filterer_closing_km: filterer_closing_km, s: term, p: page, t: 'vehicle_history', f: 'total_cost' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_total_cost__RAND__.value = e.added.id;
				AppGini.current_total_cost__RAND__.text = e.added.text;
				$j('[name="total_cost"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=breakdown_services_view_parent]').hide(); } else { $j('.btn[id=breakdown_services_view_parent]').show(); }


				if(typeof(total_cost_update_autofills__RAND__) == 'function') total_cost_update_autofills__RAND__();
			});

			if(!$j("#total_cost-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_total_cost__RAND__.value, t: 'vehicle_history', f: 'total_cost' },
					success: function(resp) {
						$j('[name="total_cost"]').val(resp.results[0].id);
						$j('[id=total_cost-container-readonly__RAND__]').html('<span class="match-text" id="total_cost-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=breakdown_services_view_parent]').hide(); } else { $j('.btn[id=breakdown_services_view_parent]').show(); }

						if(typeof(total_cost_update_autofills__RAND__) == 'function') total_cost_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_total_cost__RAND__.value, t: 'vehicle_history', f: 'total_cost' },
				success: function(resp) {
					$j('[id=total_cost-container__RAND__], [id=total_cost-container-readonly__RAND__]').html('<span class="match-text" id="total_cost-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=breakdown_services_view_parent]').hide(); } else { $j('.btn[id=breakdown_services_view_parent]').show(); }

					if(typeof(total_cost_update_autofills__RAND__) == 'function') total_cost_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_clean());


	// code for template based detail view forms

	// open the detail view template
	if($dvprint) {
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/vehicle_history_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	} else {
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/vehicle_history_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Vehicle History Details:', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', (Request::val('Embedded') ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($arrPerm['insert'] && !$selected_id) { // allow insert and no record selected?
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return vehicle_history_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return vehicle_history_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if(Request::val('Embedded')) {
		$backAction = 'AppGini.closeParentModal(); return false;';
	} else {
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id) {
		if(!Request::val('Embedded')) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate) {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return vehicle_history_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm['delete'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['delete'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['delete'] == 3) { // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);

		// if not in embedded mode and user has insert only but no view/update/delete,
		// remove 'back' button
		if(
			$arrPerm['insert']
			&& !$arrPerm['update'] && !$arrPerm['delete'] && !$arrPerm['view']
			&& !Request::val('Embedded')
		)
			$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '', $templateCode);
		elseif($separateDV)
			$templateCode = str_replace(
				'<%%DESELECT_BUTTON%%>', 
				'<button
					type="submit" 
					class="btn btn-default" 
					id="deselect" 
					name="deselect_x" 
					value="1" 
					onclick="' . $backAction . '" 
					title="' . html_attr($Translation['Back']) . '">
						<i class="glyphicon glyphicon-chevron-left"></i> ' .
						$Translation['Back'] .
				'</button>',
				$templateCode
			);
		else
			$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '', $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate) || (!$selected_id && !$AllowInsert)) {
		$jsReadOnly = '';
		$jsReadOnly .= "\tjQuery('#vehicle_registration_number').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#vehicle_registration_number_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#new_vehicle_registration_number').replaceWith('<div class=\"form-control-static\" id=\"new_vehicle_registration_number\">' + (jQuery('#new_vehicle_registration_number').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#date_of_vehicle_transfer').prop('readonly', true);\n";
		$jsReadOnly .= "\tjQuery('#date_of_vehicle_transferDay, #date_of_vehicle_transferMonth, #date_of_vehicle_transferYear').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#date_of_service').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#date_of_service_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#purchased_order_number').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#purchased_order_number_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#claim_code').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#claim_code_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#tyre_inspection_report').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#tyre_inspection_report_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#tyre_inspection_report, #tyre_inspection_report-edit-link').hide();\n";
		$jsReadOnly .= "\tjQuery('#inspection_certification_number').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#inspection_certification_number_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#document_checklist_report').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#document_checklist_report_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#document_checklist_report, #document_checklist_report-edit-link').hide();\n";
		$jsReadOnly .= "\tjQuery('#next_inspection_date').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#next_inspection_date_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('input[name=breakdown_of_vehicle]').parent().html('<div class=\"form-control-static\">' + jQuery('input[name=breakdown_of_vehicle]:checked').next().text() + '</div>')\n";
		$jsReadOnly .= "\tjQuery('#date_of_vehicle_breakdown').prop('readonly', true);\n";
		$jsReadOnly .= "\tjQuery('#date_of_vehicle_breakdownDay, #date_of_vehicle_breakdownMonth, #date_of_vehicle_breakdownYear').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#closing_km').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#closing_km_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#date_of_vehicle_reactivation').parents('.input-group').replaceWith('<div class=\"form-control-static\" id=\"date_of_vehicle_reactivation\">' + (jQuery('#date_of_vehicle_reactivation').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#total_cost').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#total_cost_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	} elseif(($AllowInsert && !$selected_id) || ($AllowUpdate && $selected_id)) {
		$jsEditable = "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
		$locale = isset($Translation['datetimepicker locale']) ? ", locale: '{$Translation['datetimepicker locale']}'" : '';
		$jsEditable .= "\tjQuery('#date_of_vehicle_reactivation').addClass('always_shown').parents('.input-group').datetimepicker({ toolbarPlacement: 'top', sideBySide: true, showClear: true, showTodayButton: true, showClose: true, icons: { close: 'glyphicon glyphicon-ok' }, format: AppGini.datetimeFormat('dt') {$locale} });";
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(vehicle_registration_number)%%>', $combo_vehicle_registration_number->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(vehicle_registration_number)%%>', $combo_vehicle_registration_number->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(vehicle_registration_number)%%>', urlencode($combo_vehicle_registration_number->MatchText), $templateCode);
	$templateCode = str_replace(
		'<%%COMBO(date_of_vehicle_transfer)%%>', 
		($selected_id && !$arrPerm['edit'] && ($noSaveAsCopy || !$arrPerm['insert']) ? 
			'<div class="form-control-static">' . $combo_date_of_vehicle_transfer->GetHTML(true) . '</div>' : 
			$combo_date_of_vehicle_transfer->GetHTML()
		), $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(date_of_vehicle_transfer)%%>', $combo_date_of_vehicle_transfer->GetHTML(true), $templateCode);
	$templateCode = str_replace('<%%COMBO(date_of_service)%%>', $combo_date_of_service->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(date_of_service)%%>', $combo_date_of_service->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(date_of_service)%%>', urlencode($combo_date_of_service->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(purchased_order_number)%%>', $combo_purchased_order_number->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(purchased_order_number)%%>', $combo_purchased_order_number->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(purchased_order_number)%%>', urlencode($combo_purchased_order_number->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(claim_code)%%>', $combo_claim_code->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(claim_code)%%>', $combo_claim_code->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(claim_code)%%>', urlencode($combo_claim_code->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(tyre_inspection_report)%%>', $combo_tyre_inspection_report->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(tyre_inspection_report)%%>', $combo_tyre_inspection_report->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(tyre_inspection_report)%%>', urlencode($combo_tyre_inspection_report->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(inspection_certification_number)%%>', $combo_inspection_certification_number->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(inspection_certification_number)%%>', $combo_inspection_certification_number->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(inspection_certification_number)%%>', urlencode($combo_inspection_certification_number->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(document_checklist_report)%%>', $combo_document_checklist_report->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(document_checklist_report)%%>', $combo_document_checklist_report->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(document_checklist_report)%%>', urlencode($combo_document_checklist_report->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(next_inspection_date)%%>', $combo_next_inspection_date->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(next_inspection_date)%%>', $combo_next_inspection_date->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(next_inspection_date)%%>', urlencode($combo_next_inspection_date->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(breakdown_of_vehicle)%%>', $combo_breakdown_of_vehicle->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(breakdown_of_vehicle)%%>', $combo_breakdown_of_vehicle->SelectedData, $templateCode);
	$templateCode = str_replace(
		'<%%COMBO(date_of_vehicle_breakdown)%%>', 
		($selected_id && !$arrPerm['edit'] && ($noSaveAsCopy || !$arrPerm['insert']) ? 
			'<div class="form-control-static">' . $combo_date_of_vehicle_breakdown->GetHTML(true) . '</div>' : 
			$combo_date_of_vehicle_breakdown->GetHTML()
		), $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(date_of_vehicle_breakdown)%%>', $combo_date_of_vehicle_breakdown->GetHTML(true), $templateCode);
	$templateCode = str_replace('<%%COMBO(closing_km)%%>', $combo_closing_km->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(closing_km)%%>', $combo_closing_km->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(closing_km)%%>', urlencode($combo_closing_km->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(total_cost)%%>', $combo_total_cost->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(total_cost)%%>', $combo_total_cost->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(total_cost)%%>', urlencode($combo_total_cost->MatchText), $templateCode);

	/* lookup fields array: 'lookup field name' => ['parent table name', 'lookup field caption'] */
	$lookup_fields = ['vehicle_registration_number' => ['gmt_fleet_register', 'Registration Number:'], 'date_of_service' => ['service', 'Date of Service:'], 'purchased_order_number' => ['purchase_orders', 'Purchased Order Number:'], 'claim_code' => ['claim', 'Claims Code:'], 'tyre_inspection_report' => ['tyre_log_sheet', 'Tyre Inspection Report:'], 'inspection_certification_number' => ['vehicle_daily_check_list', 'Inspection Certification No:'], 'document_checklist_report' => ['vehicle_daily_check_list', 'Document Check List Report:'], 'next_inspection_date' => ['vehicle_daily_check_list', 'Next Inspection Date:'], 'closing_km' => ['log_sheet', 'Closing KM:'], 'total_cost' => ['breakdown_services', 'Total Repairing Cost (R):'], ];
	foreach($lookup_fields as $luf => $ptfc) {
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']) {
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] /* && !Request::val('Embedded')*/) {
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-default add_new_parent" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus text-success"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(history_id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(vehicle_registration_number)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(new_vehicle_registration_number)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(date_of_vehicle_transfer)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(comments)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(date_of_service)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(purchased_order_number)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(claim_code)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(tyre_inspection_report)%%>', '', $templateCode);
	if($AllowUpdate && $row['tyre_inspection_report'] != '') {
		$templateCode = str_replace('<%%REMOVEFILE(tyre_inspection_report)%%>', '<br><input type="checkbox" name="tyre_inspection_report_remove" id="tyre_inspection_report_remove" value="1"> <label for="tyre_inspection_report_remove" style="color: red; font-weight: bold;">'.$Translation['remove image'].'</label>', $templateCode);
	} else {
		$templateCode = str_replace('<%%REMOVEFILE(tyre_inspection_report)%%>', '', $templateCode);
	}
	$templateCode = str_replace('<%%UPLOADFILE(inspection_certification_number)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(document_checklist_report)%%>', '', $templateCode);
	if($AllowUpdate && $row['document_checklist_report'] != '') {
		$templateCode = str_replace('<%%REMOVEFILE(document_checklist_report)%%>', '<br><input type="checkbox" name="document_checklist_report_remove" id="document_checklist_report_remove" value="1"> <label for="document_checklist_report_remove" style="color: red; font-weight: bold;">'.$Translation['remove image'].'</label>', $templateCode);
	} else {
		$templateCode = str_replace('<%%REMOVEFILE(document_checklist_report)%%>', '', $templateCode);
	}
	$templateCode = str_replace('<%%UPLOADFILE(next_inspection_date)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(breakdown_of_vehicle)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(date_of_vehicle_breakdown)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(description_of_vehicle_breakdown)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(closing_km)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(date_of_vehicle_reactivation)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(total_cost)%%>', '', $templateCode);

	// process values
	if($selected_id) {
		if( $dvprint) $templateCode = str_replace('<%%VALUE(history_id)%%>', safe_html($urow['history_id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(history_id)%%>', html_attr($row['history_id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(history_id)%%>', urlencode($urow['history_id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(vehicle_registration_number)%%>', safe_html($urow['vehicle_registration_number']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(vehicle_registration_number)%%>', html_attr($row['vehicle_registration_number']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(vehicle_registration_number)%%>', urlencode($urow['vehicle_registration_number']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(new_vehicle_registration_number)%%>', safe_html($urow['new_vehicle_registration_number']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(new_vehicle_registration_number)%%>', html_attr($row['new_vehicle_registration_number']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(new_vehicle_registration_number)%%>', urlencode($urow['new_vehicle_registration_number']), $templateCode);
		if($dvprint || (!$AllowUpdate && !$AllowInsert)) {
			$templateCode = str_replace('<%%VALUE(date_of_vehicle_transfer)%%>', safe_html($urow['date_of_vehicle_transfer']), $templateCode);
		} else {
			$templateCode = str_replace('<%%VALUE(date_of_vehicle_transfer)%%>', safe_html($urow['date_of_vehicle_transfer'], true), $templateCode);
		}
		$templateCode = str_replace('<%%URLVALUE(date_of_vehicle_transfer)%%>', urlencode($urow['date_of_vehicle_transfer']), $templateCode);
		if($AllowUpdate || $AllowInsert) {
			$templateCode = str_replace('<%%HTMLAREA(comments)%%>', '<textarea name="comments" id="comments" rows="5">' . safe_html(htmlspecialchars_decode($row['comments'])) . '</textarea>', $templateCode);
		} else {
			$templateCode = str_replace('<%%HTMLAREA(comments)%%>', '<div id="comments" class="form-control-static">' . $row['comments'] . '</div>', $templateCode);
		}
		$templateCode = str_replace('<%%VALUE(comments)%%>', nl2br($row['comments']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(comments)%%>', urlencode($urow['comments']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(date_of_service)%%>', safe_html($urow['date_of_service']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(date_of_service)%%>', html_attr($row['date_of_service']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(date_of_service)%%>', urlencode($urow['date_of_service']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(purchased_order_number)%%>', safe_html($urow['purchased_order_number']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(purchased_order_number)%%>', html_attr($row['purchased_order_number']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(purchased_order_number)%%>', urlencode($urow['purchased_order_number']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(claim_code)%%>', safe_html($urow['claim_code']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(claim_code)%%>', html_attr($row['claim_code']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(claim_code)%%>', urlencode($urow['claim_code']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(tyre_inspection_report)%%>', safe_html($urow['tyre_inspection_report']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(tyre_inspection_report)%%>', html_attr($row['tyre_inspection_report']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(tyre_inspection_report)%%>', urlencode($urow['tyre_inspection_report']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(inspection_certification_number)%%>', safe_html($urow['inspection_certification_number']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(inspection_certification_number)%%>', html_attr($row['inspection_certification_number']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(inspection_certification_number)%%>', urlencode($urow['inspection_certification_number']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(document_checklist_report)%%>', safe_html($urow['document_checklist_report']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(document_checklist_report)%%>', html_attr($row['document_checklist_report']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(document_checklist_report)%%>', urlencode($urow['document_checklist_report']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(next_inspection_date)%%>', safe_html($urow['next_inspection_date']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(next_inspection_date)%%>', html_attr($row['next_inspection_date']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(next_inspection_date)%%>', urlencode($urow['next_inspection_date']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(breakdown_of_vehicle)%%>', safe_html($urow['breakdown_of_vehicle']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(breakdown_of_vehicle)%%>', html_attr($row['breakdown_of_vehicle']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(breakdown_of_vehicle)%%>', urlencode($urow['breakdown_of_vehicle']), $templateCode);
		$templateCode = str_replace('<%%VALUE(date_of_vehicle_breakdown)%%>', app_datetime($row['date_of_vehicle_breakdown']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(date_of_vehicle_breakdown)%%>', urlencode(app_datetime($urow['date_of_vehicle_breakdown'])), $templateCode);
		if($AllowUpdate || $AllowInsert) {
			$templateCode = str_replace('<%%HTMLAREA(description_of_vehicle_breakdown)%%>', '<textarea name="description_of_vehicle_breakdown" id="description_of_vehicle_breakdown" rows="5">' . safe_html(htmlspecialchars_decode($row['description_of_vehicle_breakdown'])) . '</textarea>', $templateCode);
		} else {
			$templateCode = str_replace('<%%HTMLAREA(description_of_vehicle_breakdown)%%>', '<div id="description_of_vehicle_breakdown" class="form-control-static">' . $row['description_of_vehicle_breakdown'] . '</div>', $templateCode);
		}
		$templateCode = str_replace('<%%VALUE(description_of_vehicle_breakdown)%%>', nl2br($row['description_of_vehicle_breakdown']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(description_of_vehicle_breakdown)%%>', urlencode($urow['description_of_vehicle_breakdown']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(closing_km)%%>', safe_html($urow['closing_km']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(closing_km)%%>', html_attr($row['closing_km']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(closing_km)%%>', urlencode($urow['closing_km']), $templateCode);
		$templateCode = str_replace('<%%VALUE(date_of_vehicle_reactivation)%%>', app_datetime($row['date_of_vehicle_reactivation'], 'dt'), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(date_of_vehicle_reactivation)%%>', urlencode(app_datetime($urow['date_of_vehicle_reactivation'], 'dt')), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(total_cost)%%>', safe_html($urow['total_cost']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(total_cost)%%>', html_attr($row['total_cost']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(total_cost)%%>', urlencode($urow['total_cost']), $templateCode);
	} else {
		$templateCode = str_replace('<%%VALUE(history_id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(history_id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(vehicle_registration_number)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(vehicle_registration_number)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(new_vehicle_registration_number)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(new_vehicle_registration_number)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(date_of_vehicle_transfer)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(date_of_vehicle_transfer)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%HTMLAREA(comments)%%>', '<textarea name="comments" id="comments" rows="5"></textarea>', $templateCode);
		$templateCode = str_replace('<%%VALUE(date_of_service)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(date_of_service)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(purchased_order_number)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(purchased_order_number)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(claim_code)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(claim_code)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(tyre_inspection_report)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(tyre_inspection_report)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(inspection_certification_number)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(inspection_certification_number)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(document_checklist_report)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(document_checklist_report)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(next_inspection_date)%%>', '1', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(next_inspection_date)%%>', urlencode('1'), $templateCode);
		$templateCode = str_replace('<%%VALUE(breakdown_of_vehicle)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(breakdown_of_vehicle)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(date_of_vehicle_breakdown)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(date_of_vehicle_breakdown)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%HTMLAREA(description_of_vehicle_breakdown)%%>', '<textarea name="description_of_vehicle_breakdown" id="description_of_vehicle_breakdown" rows="5"></textarea>', $templateCode);
		$templateCode = str_replace('<%%VALUE(closing_km)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(closing_km)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(date_of_vehicle_reactivation)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(date_of_vehicle_reactivation)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(total_cost)%%>', '0.00', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(total_cost)%%>', urlencode('0.00'), $templateCode);
	}

	// process translations
	$templateCode = parseTemplate($templateCode);

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if(Request::val('dvprint_x') == '') {
		$templateCode .= "\n\n<script>\$j(function() {\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption) {
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id) {
			$templateCode.="\n\tif(document.getElementById('tyre_inspection_reportEdit')) { document.getElementById('tyre_inspection_reportEdit').style.display='inline'; }";
			$templateCode.="\n\tif(document.getElementById('tyre_inspection_reportEditLink')) { document.getElementById('tyre_inspection_reportEditLink').style.display='none'; }";
			$templateCode.="\n\tif(document.getElementById('document_checklist_reportEdit')) { document.getElementById('document_checklist_reportEdit').style.display='inline'; }";
			$templateCode.="\n\tif(document.getElementById('document_checklist_reportEditLink')) { document.getElementById('document_checklist_reportEditLink').style.display='none'; }";
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';

	$templateCode .= "\tvehicle_registration_number_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'vehicle_history_autofill.php?rnd1=$rnd1&mfk=vehicle_registration_number&id=' + encodeURIComponent('".addslashes($row['vehicle_registration_number'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'vehicle_history_autofill.php?rnd1=$rnd1&mfk=vehicle_registration_number&id=' + encodeURIComponent(AppGini.current_vehicle_registration_number{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#vehicle_registration_number$rnd1').prop('disabled', true); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm['insert'] || (($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3)) ? "\$j('#vehicle_registration_number$rnd1').prop('disabled', false); " : "\$j('#vehicle_registration_number$rnd1').prop('disabled', true); ")." \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#vehicle_registration_number_caption').length) \$j('#vehicle_registration_number_caption').click(function() { vehicle_registration_number_update_autofills$rnd1(); });\n";

	$templateCode .= "\tdate_of_service_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'vehicle_history_autofill.php?rnd1=$rnd1&mfk=date_of_service&id=' + encodeURIComponent('".addslashes($row['date_of_service'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'vehicle_history_autofill.php?rnd1=$rnd1&mfk=date_of_service&id=' + encodeURIComponent(AppGini.current_date_of_service{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#date_of_service$rnd1').prop('disabled', true); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm['insert'] || (($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3)) ? "\$j('#date_of_service$rnd1').prop('disabled', false); " : "\$j('#date_of_service$rnd1').prop('disabled', true); ")." \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#date_of_service_caption').length) \$j('#date_of_service_caption').click(function() { date_of_service_update_autofills$rnd1(); });\n";


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields
	$filterField = Request::val('FilterField');
	$filterOperator = Request::val('FilterOperator');
	$filterValue = Request::val('FilterValue');

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('vehicle_history');
	if($selected_id) {
		$jdata = get_joined_record('vehicle_history', $selected_id);
		if($jdata === false) $jdata = get_defaults('vehicle_history');
		$rdata = $row;
	}
	$templateCode .= loadView('vehicle_history-ajax-cache', ['rdata' => $rdata, 'jdata' => $jdata]);

	// hook: vehicle_history_dv
	if(function_exists('vehicle_history_dv')) {
		$args = [];
		vehicle_history_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}